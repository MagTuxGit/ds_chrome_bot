function el(e) {
	return document.getElementById(e)
}
function isValidUsername(e) {
	var t = _.str.chars(e);
	return t.length > 0 && 30 > t.length && e.match(/^[0-9a-zA-Z]+$/) ? !0 : !1
}
function isNonNull(e) {
	return e !== void 0 && null !== e
}
function createBPSGraphHelpDlg(e) {
	vex.dialog.open({
		buttons : [vex.dialog.buttons.YES],
		showCloseButton : !0,
		message : "<b>BPS Distribution Graph</b><br/>Shows how much BPS is contributed by each Powerup",
		input : '<div><img src="img/bpsgraph.png"></div>',
		contentCSS : {
			width : "1000px"
		},
		callback : function () {
			e.show()
		}
	})
}
function doCreateLeaderboarddDlg(e, t, a) {
	a === void 0 && (a = !1);
	var r = '<p><img src="img/lb.png"></p><div class="vex-custom-field-wrapper"><label for="user">Enter a username: (only letters and digits allowed)</label>   <input type="text" name="user" required="true">' + (t ? "<div>That name is taken :(</div>" : "") + (a ? "<div>Invalid Characters</div>" : "") + "</div>";
	vex.dialog.open({
		buttons : [vex.dialog.buttons.YES],
		message : "<b>Leaderboard</b><br/>Your name is always highlighted in green.",
		input : r,
		escapeButtonCloses : !1,
		callback : function (t) {
			return isValidUsername(t.user) ? (restEventCreator.eventManager.justFlushBitch(function () {
					$.post(GAME_URL + "renameuser", {
						name : t.user
					}, function (a) {
						restEventCreator.eventManager.flushDone(),
						UsernameGenerator.createNetworkUser({
							username : t.user,
							userid : a
						}, null),
						e.show()
					}).fail(function (t) {
						restEventCreator.eventManager.flushDone();
						var a = t.status;
						409 === a && doCreateLeaderboarddDlg(e, !0)
					})
				}), void 0) : (doCreateLeaderboarddDlg(e, !1, !0), void 0)
		}
	})
}
function createPersonalDripsHelpDlg() {
	vex.dialog.open({
		buttons : [vex.dialog.buttons.YES],
		showCloseButton : !0,
		message : "<b>Personal Dripping Activity</b><br/>Allows you to focus on just your drips",
		input : '<div><img src="img/personaldripinfo.png"></div>',
		contentCSS : {
			width : "800px"
		},
		callback : function () {
			showPersonalDrips(!0)
		}
	})
}
function createDrippedJVMsDlg() {
	vex.dialog.open({
		buttons : [vex.dialog.buttons.YES],
		showCloseButton : !0,
		message : "<b>Dripped JVMs</b><br/>Monitor the dripping activity of all your JVMs",
		input : '<div><img src="img/dripChartPreview.png"></div>',
		contentCSS : {
			width : "650px"
		},
		callback : function () {
			showDrippedJVMs(!0)
		}
	})
}
function createMiningDlg() {
	vex.dialog.open({
		buttons : [vex.dialog.buttons.YES],
		showCloseButton : !0,
		message : "<b>Mining Activity</b><br/>View all Spring Beans contributed to the mine.<br/>Grab one to unlock the Spring Framework powerup.",
		input : '<div><img src="img/minePreview.png"></div>',
		contentCSS : {
			width : "650px"
		},
		callback : function () {
			showMiningActivity(!0)
		}
	})
}
function enableDripTab(e, t) {
	uiElemManager.chartsTabGroup.showTabHeader(e),
	uiElemManager.chartsTabGroup.display(),
	e.show(),
	t && uiElemManager.chartsTabGroup.switchToTab(e)
}
function showPersonalDrips(e) {
	var t = uiElemManager.personalDripTab;
	enableDripTab(t, e)
}
function showDrippedJVMs(e) {
	var t = uiElemManager.dripJVMTab;
	enableDripTab(t, e),
	uiElemManager.dripJVMContent.initUI()
}
function showMiningActivity(e) {
	var t = uiElemManager.mineTab;
	enableDripTab(t, e),
	uiElemManager.mineTabContent.initUI()
}
function createLeaderboardDlg(e) {
	loggedIn ? doCreateLeaderboarddDlg(e, !1) : vex.dialog.open({
		buttons : [$.extend({}, vex.dialog.buttons.YES, {
				text : "Not Right Now"
			}), $.extend({}, vex.dialog.buttons.NO, {
				text : "SignUp",
				className : "vex-dialog-button-primary signupButton"
			})],
		escapeButtonCloses : !1,
		message : "<b>Leaderboard</b><br/>Your name is always highlighted in green.",
		input : '<p><img src="img/lb.png"></p><p>Signup to choose a custom username.<br>(Your progress will be saved)</p>',
		callback : function (t) {
			t === !1 && SignupForm.showDialog(!0),
			e.show()
		}
	})
}
function createDripJVMDlg() {
	var e = "<h3>Connect a JVM to DripStat</h3><p><b>1. Affect the game</b><br/>5% of the Max Heap Size (-Xmx value) of your JVM is considered as memory 'dripped' every hour.</p><p>Eg, a JVM with max heap of 1gb will:<ol><li>Increase your 'capacity' by 50mb every hour.</li><li>Drip 1gb to global memory, affecting global progress.</li></ol></p><p><b>2. Free Performance Monitoring</b><br/>See performance stats of your JVM for free!</p><p><b>Note:</b>Your JVM itself will <b>never</b> be utilized to run the game.<br/>We only 'look' at your JVM's max heap size when its connected.</p>";
	loggedIn || (e += "<p><b>Signup</b> to connect a JVM. (Your progress will be saved)</p>");
	var t;
	t = loggedIn ? "Connect JVM" : "SignUp",
	vex.dialog.open({
		contentCSS : {
			width : "840px",
			fontSize : "18px"
		},
		className : "vex-theme-default",
		buttons : [$.extend({}, vex.dialog.buttons.YES, {
				text : t
			}), $.extend({}, vex.dialog.buttons.NO, {
				text : "Cancel"
			})],
		message : e,
		callback : function (e) {
			e !== !1 && (loggedIn ? (NavbarAccount.navigateAway(), window.location.href = URL_ADDJVM) : SignupForm.showDialog(!0))
		}
	})
}
function createChartPointStartTime() {
	return moment().subtract(1, "minute").startOf("minute").valueOf()
}
function showWelcome(e) {
	e && (vex.dialog.alert("Welcome to Level " + curGameLevel + ".<br>All scores are reset at the start of a level."), DataSaver.welcomeDone())
}
function initGame() {
	function e() {
		localStats.update(),
		game.frameCount++
	}
	function t() {
		ui.updateUI(),
		popManager.updatePops(),
		game.frameCount >= game.fps && (game.frameCount = 0, game.clChCnt = 0, game.dpChCnt = 0, document.title = NumUtils.byteConvert(localStats.byteCount, 2) + " - DripStat")
	}
	function a() {
		var r = (new Date).getTime();
		for (e(), game.accumulatedDelay += r - game.time - 1e3 / game.fps, game.accumulatedDelay = Math.min(game.accumulatedDelay, 5e3), game.time = (new Date).getTime(); game.accumulatedDelay > 0; )
			e(), game.accumulatedDelay -= 1e3 / game.fps;
		story.onGameLoop(),
		dataSaver.savePeriodically(),
		uiElemManager.dripJVMContent.updateOnFrame(),
		restEventCreator.eventManager.flushOnInterval(),
		t(),
		setTimeout(a, 1e3 / game.fps)
	}
	$("#btn-addMem").click(function (e) {
		if (e.preventDefault(), document.hasFocus() && gameInited)
			if (localStats.byteCount < localStats.memoryCapacity) {
				if (game.clChCnt++, game.clChCnt >= 20)
					return;
				var t = CoffeeCup.calcBytesPerClick();
				localStats.byteCount + t > localStats.memoryCapacity && (t = localStats.memoryCapacity - localStats.byteCount),
				localStats.byteCount += t,
				popManager.newPop("btn-addMem", "+" + NumUtils.byteConvert(t, 2))
			} else
				dripper.dripGlobal(!0)
	}),
	$("#btn-addGlobalMem").click(function (e) {
		AnonymousUserManager.canDrip() && document.hasFocus() && (e.preventDefault(), game.dpChCnt++, game.dpChCnt >= 20 || dripper.dripGlobal(!1))
	}),
	$("#userStats .changeUser").click(function () {
		vex.dialog.alert("<a href='google.com'>Drip a JVM</a> to change the username to one of your liking")
	});
	for (var r = 0; localStats.powerUps.length > r; r++)
		StoreUI.createPowerupElem(r);
	for (var r = 0; localStats.powerUps.length > r; r++)
		StoreUI.addPowerupEventHandler(r);
	uiElemManager.init(),
	GameSocket.init(),
	(new UsernameGenerator).fetchStoredUser(),
	a()
}
(function () {
	var e;
	e = function (e) {
		var t,
		a;
		return t = !1,
		e(function () {
			var r;
			return r = (document.body || document.documentElement).style,
			t = void 0 !== r.animation || void 0 !== r.WebkitAnimation || void 0 !== r.MozAnimation || void 0 !== r.MsAnimation || void 0 !== r.OAnimation,
			e(window).bind("keyup.vex", function (e) {
				return 27 === e.keyCode ? a.closeByEscape() : void 0
			})
		}),
		a = {
			globalID : 1,
			animationEndEvent : "animationend webkitAnimationEnd mozAnimationEnd MSAnimationEnd oanimationend",
			baseClassNames : {
				vex : "vex",
				content : "vex-content",
				overlay : "vex-overlay",
				close : "vex-close",
				closing : "vex-closing",
				open : "vex-open"
			},
			defaultOptions : {
				content : "",
				showCloseButton : !0,
				escapeButtonCloses : !0,
				overlayClosesOnClick : !0,
				appendLocation : "body",
				className : "",
				css : {},
				overlayClassName : "",
				overlayCSS : {},
				contentClassName : "",
				contentCSS : {},
				closeClassName : "",
				closeCSS : {}

			},
			open : function (t) {
				return t = e.extend({}, a.defaultOptions, t),
				t.id = a.globalID,
				a.globalID += 1,
				t.$vex = e("<div>").addClass(a.baseClassNames.vex).addClass(t.className).css(t.css).data({
						vex : t
					}),
				t.$vexOverlay = e("<div>").addClass(a.baseClassNames.overlay).addClass(t.overlayClassName).css(t.overlayCSS).data({
						vex : t
					}),
				t.overlayClosesOnClick && t.$vexOverlay.bind("click.vex", function (t) {
					return t.target === this ? a.close(e(this).data().vex.id) : void 0
				}),
				t.$vex.append(t.$vexOverlay),
				t.$vexContent = e("<div>").addClass(a.baseClassNames.content).addClass(t.contentClassName).css(t.contentCSS).append(t.content).data({
						vex : t
					}),
				t.$vex.append(t.$vexContent),
				t.showCloseButton && (t.$closeButton = e("<div>").addClass(a.baseClassNames.close).addClass(t.closeClassName).css(t.closeCSS).data({
							vex : t
						}).bind("click.vex", function () {
							return a.close(e(this).data().vex.id)
						}), t.$vexContent.append(t.$closeButton)),
				e(t.appendLocation).append(t.$vex),
				a.setupBodyClassName(t.$vex),
				t.afterOpen && t.afterOpen(t.$vexContent, t),
				setTimeout(function () {
					return t.$vexContent.trigger("vexOpen", t)
				}, 0),
				t.$vexContent
			},
			getAllVexes : function () {
				return e("." + a.baseClassNames.vex + ':not(".' + a.baseClassNames.closing + '") .' + a.baseClassNames.content)
			},
			getVexByID : function (t) {
				return a.getAllVexes().filter(function () {
					return e(this).data().vex.id === t
				})
			},
			close : function (e) {
				var t;
				if (!e) {
					if (t = a.getAllVexes().last(), !t.length)
						return !1;
					e = t.data().vex.id
				}
				return a.closeByID(e)
			},
			closeAll : function () {
				var t;
				return t = a.getAllVexes().map(function () {
						return e(this).data().vex.id
					}).toArray(),
				(null != t ? t.length : void 0) ? (e.each(t.reverse(), function (e, t) {
						return a.closeByID(t)
					}), !0) : !1
			},
			closeByID : function (r) {
				var n,
				o,
				i,
				s,
				p;
				return o = a.getVexByID(r),
				o.length ? (n = o.data().vex.$vex, p = e.extend({}, o.data().vex), i = function () {
					return p.beforeClose ? p.beforeClose(o, p) : void 0
				}, s = function () {
					return o.trigger("vexClose", p),
					n.remove(),
					p.afterClose ? p.afterClose(o, p) : void 0
				}, t ? (i(), n.unbind(a.animationEndEvent).bind(a.animationEndEvent, function () {
							return s()
						}).addClass(a.baseClassNames.closing)) : (i(), s()), !0) : void 0
			},
			closeByEscape : function () {
				var t,
				r,
				n;
				return n = a.getAllVexes().map(function () {
						return e(this).data().vex.id
					}).toArray(),
				(null != n ? n.length : void 0) ? (r = Math.max.apply(Math, n), t = a.getVexByID(r), t.data().vex.escapeButtonCloses !== !0 ? !1 : a.closeByID(r)) : !1
			},
			setupBodyClassName : function (t) {
				return t.bind("vexOpen.vex", function () {
					return e("body").addClass(a.baseClassNames.open)
				}).bind("vexClose.vex", function () {
					return a.getAllVexes().length ? void 0 : e("body").removeClass(a.baseClassNames.open)
				})
			},
			hideLoading : function () {
				return e(".vex-loading-spinner").remove()
			},
			showLoading : function () {
				return a.hideLoading(),
				e("body").append('<div class="vex-loading-spinner ' + a.defaultOptions.className + '"></div>')
			}
		}
	},
	"function" == typeof define && define.amd ? define(["jquery"], e) : "object" == typeof exports ? module.exports = e(require("jquery")) : window.vex = e(jQuery)
}).call(this), function () {
	var e;
	e = function (e, t) {
		var a,
		r;
		return null == t ? e.error("Vex is required to use vex.dialog") : (a = function (t) {
			var a;
			return a = {},
			e.each(t.serializeArray(), function () {
				return a[this.name] ? (a[this.name].push || (a[this.name] = [a[this.name]]), a[this.name].push(this.value || "")) : a[this.name] = this.value || ""
			}),
			a
		}, r = {}, r.buttons = {
				YES : {
					text : "OK",
					type : "submit",
					className : "vex-dialog-button-primary"
				},
				NO : {
					text : "Cancel",
					type : "button",
					className : "vex-dialog-button-secondary",
					click : function (e) {
						return e.data().vex.value = !1,
						t.close(e.data().vex.id)
					}
				}
			}, r.defaultOptions = {
				callback : function () {},
				afterOpen : function () {},
				message : "Message",
				input : '<input name="vex" type="hidden" value="_vex-empty-value" />',
				value : !1,
				buttons : [r.buttons.YES, r.buttons.NO],
				showCloseButton : !1,
				onSubmit : function (n) {
					var o,
					i;
					return o = e(this),
					i = o.parent(),
					n.preventDefault(),
					n.stopPropagation(),
					i.data().vex.value = r.getFormValueOnSubmit(a(o)),
					t.close(i.data().vex.id)
				},
				focusFirstInput : !0
			}, r.defaultAlertOptions = {
				message : "Alert",
				buttons : [r.buttons.YES]
			}, r.defaultConfirmOptions = {
				message : "Confirm"
			}, r.open = function (a) {
			var n;
			return a = e.extend({}, t.defaultOptions, r.defaultOptions, a),
			a.content = r.buildDialogForm(a),
			a.beforeClose = function (e) {
				return a.callback(e.data().vex.value)
			},
			n = t.open(a),
			a.focusFirstInput && n.find('input[type="submit"], textarea, input[type="date"], input[type="datetime"], input[type="datetime-local"], input[type="email"], input[type="month"], input[type="number"], input[type="password"], input[type="search"], input[type="tel"], input[type="text"], input[type="time"], input[type="url"], input[type="week"]').first().focus(),
			n
		}, r.alert = function (t) {
			return "string" == typeof t && (t = {
					message : t
				}),
			t = e.extend({}, r.defaultAlertOptions, t),
			r.open(t)
		}, r.confirm = function (t) {
			return "string" == typeof t ? e.error("dialog.confirm(options) requires options.callback.") : (t = e.extend({}, r.defaultConfirmOptions, t), r.open(t))
		}, r.prompt = function (t) {
			var a;
			return "string" == typeof t ? e.error("dialog.prompt(options) requires options.callback.") : (a = {
					message : '<label for="vex">' + (t.label || "Prompt:") + "</label>",
					input : '<input name="vex" type="text" class="vex-dialog-prompt-input" placeholder="' + (t.placeholder || "") + '"  value="' + (t.value || "") + '" />'
				}, t = e.extend({}, a, t), r.open(t))
		}, r.buildDialogForm = function (t) {
			var a,
			n,
			o;
			return a = e('<form class="vex-dialog-form" />'),
			o = e('<div class="vex-dialog-message" />'),
			n = e('<div class="vex-dialog-input" />'),
			a.append(o.append(t.message)).append(n.append(t.input)).append(r.buttonsToDOM(t.buttons)).bind("submit.vex", t.onSubmit),
			a
		}, r.getFormValueOnSubmit = function (e) {
			return e.vex || "" === e.vex ? "_vex-empty-value" === e.vex ? !0 : e.vex : e
		}, r.buttonsToDOM = function (a) {
			var r;
			return r = e('<div class="vex-dialog-buttons" />'),
			e.each(a, function (n, o) {
				return r.append(e('<input type="' + o.type + '" />').val(o.text).addClass(o.className + " vex-dialog-button " + (0 === n ? "vex-first " : "") + (n === a.length - 1 ? "vex-last " : "")).bind("click.vex", function (a) {
						return o.click ? o.click(e(this).parents("." + t.baseClassNames.content), a) : void 0
					}))
			}),
			r
		}, r)
	},
	"function" == typeof define && define.amd ? define(["jquery", "vex"], e) : "object" == typeof exports ? module.exports = e(require("jquery"), require("vex")) : window.vex.dialog = e(window.jQuery, window.vex)
}
.call(this), function (e) {
	function t(e) {
		var t;
		if (e = parseInt(e, 10), !e || 1 > e)
			return "";
		for (t = ""; e; )
			t += "0", e -= 1;
		return t
	}
	function a(e, a, r) {
		return null == e && (e = ""),
		e = "" + e,
		(r ? e : "") + t(a - e.length) + (r ? "" : e)
	}
	function r(e, t) {
		for (var a, r = e.length; r--; )
			if (t(e[r]) > 0) {
				a = e[r];
				break
			}
		return a
	}
	var n,
	o,
	i = "function" == typeof require;
	if (i)
		try {
			o = require("lodash")
		} catch (s) {
			o = require("underscore")
		}
	else {
		if (!e._)
			throw "Moment Duration Format cannot find Lo-Dash or Underscore";
		o = e._
	}
	if (i)
		n = require("moment");
	else {
		if (!e.moment)
			throw "Moment Duration Format cannot find Moment.js";
		n = e.moment
	}
	n.duration.fn.format = function () {
		var e,
		r,
		i,
		s,
		p,
		l,
		u,
		c = [].slice.call(arguments),
		d = o.extend({}, this.format.defaults),
		m = n.duration(this);
		return d.duration = this,
		o.each(c, function (e) {
			return "string" == typeof e || "function" == typeof e ? (d.template = e, undefined) : "number" == typeof e ? (d.precision = e, undefined) : (o.isObject(e) && o.extend(d, e), undefined)
		}),
		i = d.types = o.isArray(d.types) ? d.types : d.types.split(" "),
		"function" == typeof d.template && (d.template = d.template.apply(d)),
		e = RegExp(o.map(i, function (e) {
					return d[e].source
				}).join("|"), "g"),
		s = function (e) {
			return o.find(i, function (t) {
				return d[t].test(e)
			})
		},
		r = o.map(d.template.match(e), function (e, t) {
				var a = s(e),
				r = e.length;
				return {
					index : t,
					length : r,
					token : "escape" === a ? e.replace(d.escape, "$1") : e,
					type : "escape" === a || "general" === a ? null : a
				}
			}, this),
		p = o.intersection(i, o.unique(o.compact(o.pluck(r, "type")))),
		p.length ? (o.each(p, function (e, t) {
				var a,
				n,
				i,
				s,
				l;
				a = m.as(e),
				n = a > 0 ? Math.floor(a) : Math.ceil(a),
				i = a - n,
				s = t + 1 === p.length,
				l = !t,
				o.each(r, function (t) {
					t.type === e && (o.extend(t, {
							value : a,
							wholeValue : n,
							decimalValue : i,
							isLeast : s,
							isMost : l
						}), l && null == d.forceLength && t.length > 1 && (d.forceLength = !0))
				}),
				m.subtract(n, e)
			}), d.trim && (l = !1, u = o["left" === d.trim ? "reduce" : "reduceRight"](r, function (e, t, a) {
						return l || t.isLeast || null != t.type && t.wholeValue ? (l = !0, e) : a
					}, -1), -1 !== u && (r = o["left" === d.trim ? "rest" : "first"](r, "left" === d.trim ? u + 1 : u))), l = !1, "right" === d.trim && r.reverse(), r = o.map(r, function (e) {
					var r,
					n;
					if (!e.type)
						return e.token;
					if (r = e.isLeast && 0 > d.precision ? "" + Math.floor(e.wholeValue * Math.pow(10, d.precision)) * Math.pow(10, -d.precision) : "" + e.wholeValue, r = r.replace(/^\-/, ""), e.length > 1 && (l || e.isMost || d.forceLength) && (r = a(r, e.length)), e.isLeast && d.precision > 0)
						switch (n = ("" + e.decimalValue).replace(/^\-/, "").split(/\.|e\-/), n.length) {
						case 1:
							r += "." + a(n[0], d.precision, !0).slice(0, d.precision);
							break;
						case 2:
							r += "." + a(n[1], d.precision, !0).slice(0, d.precision);
							break;
						case 3:
							r += "." + a(t(+n[2] - 1) + (n[0] || "0") + n[1], d.precision, !0).slice(0, d.precision);
							break;
						default:
							throw "Moment Duration Format: unable to parse token decimal value."
						}
					return e.isMost && 0 > e.value && (r = "-" + r),
					l = !0,
					r
				}), "right" === d.trim && r.reverse(), r.join("")) : o.pluck(r, "token").join("")
	},
	n.duration.fn.format.defaults = {
		escape : /\[(.+?)\]/,
		years : /[Yy]+/,
		months : /M+/,
		weeks : /[Ww]+/,
		days : /[Dd]+/,
		hours : /[Hh]+/,
		minutes : /m+/,
		seconds : /s+/,
		milliseconds : /S+/,
		general : /.+?/,
		types : "escape years months weeks days hours minutes seconds milliseconds general",
		trim : "left",
		precision : 0,
		forceLength : null,
		template : function () {
			var e,
			t = this.types,
			a = this.duration;
			switch (e = "function" == typeof o.findLast ? o.findLast(t, function (e) {
						return a._data[e]
					}) : r(t, function (e) {
						return a._data[e]
					})) {
			case "seconds":
				return "h:mm:ss";
			case "minutes":
				return "d[d] h:mm";
			case "hours":
				return "d[d] h[h]";
			case "days":
				return "M[m] d[d]";
			case "weeks":
				return "y[y] w[w]";
			case "months":
				return "y[y] M[m]";
			case "years":
				return "y[y]";
			default:
				return "y[y] M[m] d[d] h:mm:ss"
			}
		}
	}
}
(this), function (e) {
	"use strict";
	function t(e) {
		var t,
		a,
		r,
		n,
		o,
		i,
		p,
		l,
		u,
		c = 0,
		d = "";
		if (!e)
			return e;
		do
			t = e[c++], a = e[c++], r = e[c++], l = t << 16 | a << 8 | r, n = 63 & l >> 18, o = 63 & l >> 12, i = 63 & l >> 6, p = 63 & l, d += s.charAt(n) + s.charAt(o) + s.charAt(i) + s.charAt(p);
		while (e.length > c);
		return u = e.length % 3,
		(u ? d.slice(0, u - 3) : d) + "===".slice(u || 3)
	}
	function a(e) {
		var t,
		a,
		r,
		n,
		o,
		i,
		p,
		l,
		u = 0,
		c = [];
		if (!e)
			return e;
		e += "";
		do
			n = s.indexOf(e.charAt(u++)), o = s.indexOf(e.charAt(u++)), i = s.indexOf(e.charAt(u++)), p = s.indexOf(e.charAt(u++)), l = n << 18 | o << 12 | i << 6 | p, t = 255 & l >> 16, a = 255 & l >> 8, r = 255 & l, c.push(t), 64 !== i && (c.push(a), 64 !== p && c.push(r));
		while (e.length > u);
		return c
	}
	function r(e, t) {
		return e.charCodeAt(Math.floor(t % e.length))
	}
	function n(e, t) {
		return _.map(t, function (t, a) {
			return t.charCodeAt(0)^r(e, a)
		})
	}
	function o(e, t) {
		return _.map(t, function (t, a) {
			return String.fromCharCode(t^r(e, a))
		}).join("")
	}
	var i = {
		encode : function (e, a) {
			return a = n(e, a),
			t(a)
		},
		decode : function (e, t) {
			return t = a(t),
			o(e, t)
		}
	},
	s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
	e.XORCipher = i
}
(this);
var WS_SVR = "https://dripcast.dripstat.com/", REST_SVR = "https://gameserver.dripstat.com/", APM_SVR = "https://apmgui.dripstat.com/", REST_URL = REST_SVR + "rest/", GAME_URL = REST_URL + "l15/game/", URL_LOGIN = "/login.html", URL_GAME = "/game", URL_ADDJVM = "/app/#/addjvm", Units;
(function (e) {
	e[e.BYTE = 1] = "BYTE",
	e[e.KB = 1e3] = "KB",
	e[e.MB = 1e6] = "MB",
	e[e.GB = 1e9] = "GB",
	e[e.TB = 1e12] = "TB",
	e[e.PB = 1e15] = "PB"
})(Units || (Units = {}));
var NumUtils = function () {
	function e() {}

	return e.Beautify = function (e, t) {
		var a = "";
		if (t > 0) {
			var r = (e + "").split("."),
			n = 2 == r.length;
			if (n)
				var o = r[1], i = (o + "0000000").slice(0, t);
			a = this.Beautify(Math.floor(e)) + (n ? "." + i : "")
		} else {
			e = Math.floor(e);
			var s = (e + "").split("").reverse();
			for (var p in s)
				0 == p % 3 && p > 0 && (a = "," + a), a = s[p] + a
		}
		return a
	},
	e.precise_round = function (e, t) {
		return Math.round(e * Math.pow(10, t)) / Math.pow(10, t)
	},
	e.getUnit = function (e) {
		return e >= Units.PB ? Units.PB : e >= Units.TB ? Units.TB : e >= Units.GB ? Units.GB : e >= Units.MB ? Units.MB : e >= 1e3 ? 1e3 : 1
	},
	e.byteConvert = function (e, t) {
		var a = Math.round(e);
		return a >= Units.PB ? this.Beautify(a / Units.PB, t) + " PB" : a >= Units.TB ? this.Beautify(a / Units.TB, t) + " TB" : a >= Units.GB ? this.Beautify(a / Units.GB, t) + " GB" : a >= Units.MB ? this.Beautify(a / Units.MB, t) + " MB" : a >= 1e3 ? this.Beautify(a / 1e3, t) + " kB" : 1 == e ? "1 byte" : this.Beautify(e, t) + " bytes"
	},
	e.getRandomInt = function (e, t) {
		return Math.floor(Math.random() * (t - e + 1)) + e
	},
	e
}
(), __extends = this.__extends || function (e, t) {
	function a() {
		this.constructor = e
	}
	for (var r in t)
		t.hasOwnProperty(r) && (e[r] = t[r]);
	a.prototype = t.prototype,
	e.prototype = new a
}, UIElem = function () {
	function e(e) {
		this.elemId = e,
		this.cachedEl = null
	}
	return e.prototype.show = function () {
		this.el()[0].style.visibility = "visible"
	},
	e.prototype.hide = function () {
		this.el()[0].style.visibility = "hidden"
	},
	e.prototype.display = function () {
		this.el()[0].style.display = "block"
	},
	e.prototype.displayNone = function () {
		this.el()[0].style.display = "none"
	},
	e.prototype.isHidden = function () {
		return "hidden" === this.el()[0].style.visibility
	},
	e.prototype.el = function () {
		return null === this.cachedEl && (this.cachedEl = $(this.elemId)),
		this.cachedEl
	},
	e.prototype.resetCache = function () {
		this.cachedEl = null
	},
	e.prototype.animateFontSize = function (e) {
		var t = this.el(),
		a = t.css("font-size");
		t.animate({
			fontSize : e + "px"
		}, 1e3, "linear"),
		t.animate({
			fontSize : a
		}, 1250, "linear")
	},
	e
}
(), TabbedUIElem = function (e) {
	function t(t) {
		e.call(this, t),
		this._tabShown = !1
	}
	return __extends(t, e),
	Object.defineProperty(t.prototype, "tabShown", {
		get : function () {
			return this._tabShown
		},
		set : function (e) {
			this._tabShown = e
		},
		enumerable : !0,
		configurable : !0
	}),
	t
}
(UIElem), StoryNotifications = function (e) {
	function t() {
		e.call(this, "#storyNotifications")
	}
	return __extends(t, e),
	t.prototype.start = function () {
		var e = uiElemManager.btnAddMem.el().offset(),
		t = uiElemManager.btnAddMem.el().height(),
		a = uiElemManager.btnAddMem.el().width(),
		r = e.top + t / 2,
		n = this.el()[0].style;
		n.top = r + "px",
		n.left = e.left + a + 10 + "px",
		this.display()
	},
	t.prototype.addMsg = function (e) {
		var t = 6;
		$(".storyMsg").length === t - 1 && $(".storyMsg:last").remove();
		var a = $("<div>").addClass("storyMsg").css("opacity", "0").html(e).prependTo(this.el());
		a.animate({
			opacity : 1
		}, 500, "linear")
	},
	t.prototype.clearMsgs = function () {
		this.el().empty()
	},
	t
}
(UIElem), LeaderboardName = function (e) {
	function t() {
		e.call(this, "#ldbdUser"),
		this.inited = !1
	}
	return __extends(t, e),
	t.prototype.showSignupDlg = function () {
		vex.dialog.open({
			buttons : [$.extend({}, vex.dialog.buttons.YES, {
					text : "Signup",
					className : "vex-dialog-button-primary signupButton"
				}), $.extend({}, vex.dialog.buttons.NO, {
					text : "Cancel"
				})],
			escapeButtonCloses : !1,
			message : "<p>Signup to choose a custom username.<br>(Your progress will be saved)</p>",
			callback : function (e) {
				e === !0 && SignupForm.showDialog(!0)
			}
		})
	},
	t.showRenameDlg = function (e, a) {
		a === void 0 && (a = !1);
		var r = '<p><img src="img/lb.png"></p><div class="vex-custom-field-wrapper"><label for="user">Enter a username: (only letters and digits allowed)</label>   <input type="text" name="user" required="true">' + (e ? "<div>That name is taken :(</div>" : "") + (a ? "<div>Invalid Characters</div>" : "") + "</div>";
		vex.dialog.open({
			buttons : [vex.dialog.buttons.YES, vex.dialog.buttons.NO],
			message : "<b>Change Username</b>",
			input : r,
			escapeButtonCloses : !1,
			callback : function (e) {
				return e !== !1 ? isValidUsername(e.user) ? (restEventCreator.eventManager.justFlushBitch(function () {
						$.post(GAME_URL + "renameuser", {
							name : e.user
						}, function (t) {
							restEventCreator.eventManager.flushDone(),
							UsernameGenerator.createNetworkUser({
								username : e.user,
								userid : t
							}, null)
						}).fail(function (e) {
							restEventCreator.eventManager.flushDone();
							var a = e.status;
							409 === a && t.showRenameDlg(!0)
						})
					}), void 0) : (t.showRenameDlg(!1, !0), void 0) : void 0
			}
		})
	},
	t.prototype.initHandlers = function () {
		var e = this;
		this.resetCache(),
		this.el().click(function () {
			loggedIn ? t.showRenameDlg(!1) : e.showSignupDlg()
		})
	},
	t
}
(UIElem), DripJVMButton = function (e) {
	function t() {
		e.call(this, "#btn-dripJVM")
	}
	return __extends(t, e),
	t.prototype.initHandlers = function () {
		this.el().click(function () {
			createDripJVMDlg()
		})
	},
	t
}
(UIElem), SignupForm = function (e) {
	function t() {
		e.call(this, "#signupForm")
	}
	return __extends(t, e),
	t.prototype.initHandlers = function () {
		this.el().submit(function (e) {
			e.preventDefault(),
			restEventCreator.eventManager.justFlushBitch(function () {
				var e = null != networkUser ? networkUser.userId : "",
				a = restEventCreator.createSaveEvent(),
				r = {
					fname : $("#sgnFname").val(),
					lname : $("#sgnLname").val(),
					company : $("#sgnCompany").val(),
					email : $("#sgnEmail").val(),
					pass : $("#sgnPass").val(),
					gameUserid : e,
					gameEvent : a
				};
				$("#signupFormBtn").attr("disabled", "disabled"),
				$.ajax({
					url : REST_URL + "signupgame",
					type : "POST",
					data : JSON.stringify(r),
					contentType : "application/json; charset=utf-8",
					success : function () {
						restEventCreator.eventManager.flushDone(),
						window.location.replace(URL_GAME)
					},
					error : function (e) {
						restEventCreator.eventManager.flushDone(),
						t.showErrorMsg("#signupError", JSON.parse(e.responseText), "#signupFormBtn")
					}
				})
			})
		})
	},
	t.showErrorMsg = function (e, t, a) {
		$(e)[0].style.display = "block",
		$(e).text(t),
		$(a).removeAttr("disabled")
	},
	t.showDialog = function (e) {
		e ? ($("#signUpTitle").text("Sign Up"), $("#signUpHeadText").text(""), $("#signupDlg").modal()) : ($("#signupCloseBtn")[0].style.display = "none", $("#signUpTitle").text("Save your game by Signing up"), $("#signUpHeadText").html("Save your game to continue playing."), $("#signupDlg").modal({
				backdrop : "static",
				keyboard : !1
			}))
	},
	t
}
(UIElem), NavbarAnon = function (e) {
	function t() {
		e.call(this, "#anonNavbar")
	}
	return __extends(t, e),
	t.prototype.initHandlers = function () {
		$("#signupBtn").click(function () {
			SignupForm.showDialog(!0)
		})
	},
	t
}
(UIElem), NavbarAccount = function (e) {
	function t() {
		e.call(this, "#accNavbar")
	}
	return __extends(t, e),
	t.prototype.initHandlers = function () {
		var e = this;
		$("#logoutButton").click(function () {
			t.navigateAway(),
			e.onLogout()
		})
	},
	t.navigateAway = function () {
		DataSaver.saveData(!1)
	},
	t.prototype.onLogout = function () {
		$.post(REST_URL + "logout", null, function () {
			window.location.replace(URL_LOGIN)
		})
	},
	t
}
(UIElem), MemCapacityUI = function (e) {
	function t() {
		e.call(this, "#memoryLimit")
	}
	return __extends(t, e),
	t.prototype.updateUI = function () {
		this.el().children(".amount").text(NumUtils.byteConvert(localStats.memoryCapacity, 2)),
		this.el().children(".amountBytes").text(" " + NumUtils.Beautify(localStats.memoryCapacity) + " bytes"),
		UIManager.hideIfNeeded("#memoryLimit .amountBytes", localStats.memoryCapacity > 1e3)
	},
	t
}
(UIElem), TabGroup = function (e) {
	function t(t) {
		e.call(this, t)
	}
	return __extends(t, e),
	t.prototype.switchToTab = function (e) {
		$(this.elemId + " a[href=" + e.elemId + "]").tab("show")
	},
	t.prototype.showTabHeader = function (e) {
		$(this.elemId + ' li a[href="' + e.elemId + '"]')[0].style.display = "block"
	},
	t
}
(UIElem), UIElemManager = function () {
	function e() {
		this.btnDripJvm = new DripJVMButton,
		this.btnDripToGlobal = new UIElem("#btn-addGlobalMem"),
		this.globalInfo = new UIElem("#globalInfo"),
		this.bpsChart = new BPSChart,
		this.btnAddMem = new UIElem("#btn-addMem"),
		this.storyNotifications = new StoryNotifications,
		this.memCapacityText = new UIElem("#memoryLimit"),
		this.localProgressBar = new UIElem("#middleColumn .progress"),
		this.upgrades = new UIElem("#upgrades"),
		this.globalHeapText = new UIElem("#globalHeapText"),
		this.globalTab = new UIElem("#globaltab"),
		this.leaderboard = new UIElem("#leaderBoard"),
		this.dripGraph = new DripChart,
		this.personalDripChart = new PersonalDripChart,
		this.bpsText = new UIElem("#bps-current"),
		this.capacityText = new UIElem("#memoryLimit"),
		this.navbarAnonymous = new NavbarAnon,
		this.navbarAccount = new NavbarAccount,
		this.signupForm = new SignupForm,
		this.heapCurrentElem = new UIElem("#heap-count-current"),
		this.heapCurrentBytesElem = new UIElem("#heap-count-current-bytes"),
		this.chartsTabGroup = new TabGroup("#dripChartTabs"),
		this.personalDripTab = new UIElem("#personalDripTab"),
		this.memCapacity = new MemCapacityUI,
		this.networkError = new UIElem("#networkError"),
		this.dripJVMGrid = new UIElem("#dripJVMGrid"),
		this.dripJVMContent = new JVMDripTab,
		this.dripJVMSignup = new UIElem("#dripJVMSignup"),
		this.dripJVMTab = new UIElem("#jvmTab"),
		this.mineTab = new UIElem("#mineTab"),
		this.mineTabContent = new MinePanel,
		this.mineBeanCount = new UIElem("#mineCount"),
		this.mineButtonWrapper = new UIElem("#mineButtonWrapper"),
		this.mineUnlockedMsg = new UIElem("#mineUnlockedMsg"),
		this.mineTabHeader = new UIElem("#mineTabHeader"),
		this.globalDripTab = new UIElem("#globalDripTab"),
		this.globalHeapText.hide(),
		this.globalTab.hide(),
		this.leaderboard.hide(),
		this.dripGraph.hide(),
		this.memCapacityText.hide(),
		this.localProgressBar.hide(),
		this.chartsTabGroup.displayNone(),
		this.personalDripTab.hide(),
		this.dripJVMTab.hide(),
		this.mineTab.hide()
	}
	return e.prototype.init = function () {
		this.navbarAccount.initHandlers(),
		this.navbarAnonymous.initHandlers(),
		this.btnDripJvm.initHandlers(),
		this.signupForm.initHandlers(),
		this.bpsChart.initUI(),
		this.dripGraph.initUI(),
		this.personalDripChart.initUI(),
		this.memCapacity.updateUI(),
		$('a[data-toggle="tab"]').on("shown.bs.tab", function (e) {
			e.target.hash === uiElemManager.personalDripTab.elemId ? (uiElemManager.dripJVMContent.tabShown = !1, uiElemManager.personalDripChart.tabShown = !0, uiElemManager.dripGraph.tabShown = !1, uiElemManager.mineTabContent.tabShown = !1) : e.target.hash === uiElemManager.dripJVMTab.elemId ? (uiElemManager.dripJVMContent.tabShown = !0, uiElemManager.personalDripChart.tabShown = !1, uiElemManager.dripGraph.tabShown = !1, uiElemManager.mineTabContent.tabShown = !1) : e.target.hash === uiElemManager.mineTab.elemId ? (uiElemManager.dripJVMContent.tabShown = !1, uiElemManager.personalDripChart.tabShown = !1, uiElemManager.dripGraph.tabShown = !1, uiElemManager.mineTabContent.tabShown = !0) : (uiElemManager.dripJVMContent.tabShown = !1, uiElemManager.personalDripChart.tabShown = !1, uiElemManager.dripGraph.tabShown = !0, uiElemManager.mineTabContent.tabShown = !1)
		})
	},
	e.prototype.showAll = function () {
		this.globalHeapText.show(),
		this.globalTab.show(),
		this.dripGraph.show(),
		this.memCapacityText.show(),
		this.localProgressBar.show()
	},
	e.prototype.initWithoutStory = function () {
		StoreUI.createInitial(),
		StoreUI.createRestOfThem(),
		uiElemManager.btnDripJvm.show(),
		uiElemManager.btnDripToGlobal.show(),
		uiElemManager.globalInfo.show(),
		uiElemManager.dripGraph.show(),
		uiElemManager.showAll()
	},
	e
}
(), __extends = this.__extends || function (e, t) {
	function a() {
		this.constructor = e
	}
	for (var r in t)
		t.hasOwnProperty(r) && (e[r] = t[r]);
	a.prototype = t.prototype,
	e.prototype = new a
}, SpringPowerup = function () {
	function e() {
		this.isLocked = !0
	}
	return e.prototype.getTooltipFooter = function () {
		var e = "";
		return this.isLocked && (e = "<span style='font-weight: bold'>Mined Powerup</span>: Needs unlocking.", e += "<br/>To unlock: Grab a 'Spring Bean' from the Global Mine or connect a JVM that uses Spring Framework."),
		e
	},
	e.prototype.hasFooter = function (e) {
		return this.isSpring(e) && this.isLocked
	},
	e.prototype.isSpring = function (e) {
		return null != e && "Spring Framework" === e.name
	},
	e.prototype.canBuy = function (e) {
		return this.isSpring(e) ? !this.isLocked : !0
	},
	e
}
(), PowerUp = function () {
	function e(t, a, r, n) {
		this.baseBps = a,
		this.name = r,
		this.desc = n,
		this.available = !1,
		this.totalBps = 0,
		this.count = 0,
		this.upgrades = [],
		this.purchasedUpgrades = [],
		this.image = null,
		this.upgradeImgYIndex = 0,
		this.upgradeImgXIndex = 0,
		this.basePrice = "number" == typeof t ? t : e.priceStringConvertor(t),
		this.currentPrice = this.basePrice,
		this.currentBps = a
	}
	return e.prototype.printInfo = function () {
		var e = [];
		return _.each(this.purchasedUpgrades, function (t) {
			e.push(t.printInfo())
		}),
		_.each(this.upgrades, function (t) {
			e.push(t.printInfo())
		}), {
			name : this.name,
			baseBps : this.baseBps,
			basePrice : this.basePrice,
			upgs : e
		}
	},
	Object.defineProperty(e.prototype, "curPrice", {
		get : function () {
			return this.currentPrice
		},
		enumerable : !0,
		configurable : !0
	}),
	e.prototype.load = function (e) {
		var t = this;
		this.count = e.count,
		this.currentPrice = e.price,
		this.currentBps = e.curBps,
		_.each(e.upgs, function (e) {
			var a = _.where(t.upgrades, {
					name : e
				});
			if (1 == a.length) {
				var r = a[0];
				t.moveUpgradeToPurchased(r),
				r.load()
			}
		}),
		this.updateAvailibilityState(localStats.byteCount),
		this.updateMyTotalBps(this.currentBps),
		this.updateUpggrades(),
		uiElemManager.bpsChart.update(this),
		ui.updatePowerupButton(this)
	},
	e.priceStringConvertor = function (e) {
		return e.match(/kb$/) ? 1e3 * parseFloat(e) : e.match(/mb$/) ? parseFloat(e) * Units.MB : e.match(/gb$/) ? parseFloat(e) * Units.GB : e.match(/tb$/) ? parseFloat(e) * Units.TB : e.match(/pb$/) ? parseFloat(e) * Units.PB : parseFloat(e)
	},
	e.priceStringConvertorForRest = function (e) {
		return e.match(/kb$/) ? [parseFloat(e), 1e3] : e.match(/mb$/) ? [parseFloat(e), Units.MB] : e.match(/gb$/) ? [parseFloat(e), Units.GB] : e.match(/tb$/) ? [parseFloat(e), Units.TB] : e.match(/pb$/) ? [parseFloat(e), Units.PB] : [parseFloat(e), 1]
	},
	e.prototype.updateAvailibilityState = function (e) {
		this.available = e >= this.currentPrice
	},
	e.prototype.fetchTotalBps = function () {
		return this.totalBps
	},
	e.prototype.buy = function (e) {
		if (this.available && e.byteCount >= this.currentPrice && springPowerup.canBuy(this)) {
			var t = e.byteCount;
			return e.byteCount -= this.currentPrice,
			this.calcPrice(),
			this.count++,
			this.updateBps(this.currentBps),
			this.updateAvailibilityState(e.byteCount),
			this.updateUpggrades(),
			uiElemManager.bpsChart.update(this),
			ui.updatePowerupButton(this),
			restEventCreator.onBuy(this, t),
			!0
		}
		return !1
	},
	e.prototype.updateUpggrades = function () {
		if (this.upgrades.length > 0) {
			var e = _.first(this.upgrades);
			e.unlock()
		}
	},
	e.prototype.calcPrice = function () {
		if (this.curPrice < e.MAX_PRICE) {
			var t = Math.ceil(1.1 * this.currentPrice);
			if (t > this.currentPrice) {
				t > e.MAX_PRICE && (t = e.MAX_PRICE),
				this.currentPrice = t;
				var a = this.priceStr.split(",").join("").toLowerCase();
				this.currentPrice = e.priceStringConvertor(a)
			}
		}
	},
	Object.defineProperty(e.prototype, "priceStr", {
		get : function () {
			return NumUtils.byteConvert(this.currentPrice, 2)
		},
		enumerable : !0,
		configurable : !0
	}),
	e.prototype.addUpgrade = function (e) {
		return e.powerup = this,
		e.imgYIdx = this.upgradeImgYIndex,
		e.imgXIdx = this.upgradeImgXIndex,
		this.upgradeImgXIndex++,
		this.upgrades.push(e),
		this
	},
	e.prototype.moveUpgradeToPurchased = function (e) {
		this.purchasedUpgrades.push(e);
		var t = this.upgrades;
		t.splice(t.indexOf(e), 1)
	},
	e.prototype.purchaseUpgrade = function (e) {
		this.moveUpgradeToPurchased(e),
		this.updateBps(1.1 * this.currentBps),
		this.updateUpggrades(),
		UIManager.onUpgradePurchase(this)
	},
	e.prototype.updateBps = function (e) {
		this.updateMyTotalBps(e),
		localStats.updateBps()
	},
	e.prototype.updateMyTotalBps = function (e) {
		this.currentBps = NumUtils.precise_round(e, 2),
		this.totalBps = NumUtils.precise_round(this.count * this.currentBps, 2)
	},
	e.MAX_PRICE = 9007199254740990,
	e
}
(), UpgradeBase = function () {
	function e(e, t, a) {
		this.name = e,
		this.desc = t,
		this.available = !1,
		this._purchased = !1,
		this.price = "number" == typeof a ? a : PowerUp.priceStringConvertor(a)
	}
	return e.prototype.printInfo = function () {
		return {
			name : this.name,
			price : this.price
		}
	},
	Object.defineProperty(e.prototype, "purchased", {
		get : function () {
			return this._purchased
		},
		enumerable : !0,
		configurable : !0
	}),
	e.prototype.updateAvailibility = function (e) {
		this.available = e >= this.price
	},
	e.prototype.renderHtml = function () {
		return alert("abstract method: this should not be called"),
		""
	},
	e.prototype.canBuy = function (e) {
		return this.available && e.byteCount >= this.price
	},
	e.prototype.buy = function (e) {
		return this.canBuy(e) ? (e.byteCount -= this.price, this._purchased = !0, !0) : !1
	},
	e.prototype.load = function () {
		this._purchased = !0
	},
	e.prototype.save = function () {
		return {
			name : this.name
		}
	},
	e
}
(), SpecialUpgrade = function (e) {
	function t(t, a, r, n, o, i) {
		e.call(this, t, a, r),
		this.image = n,
		this.buyCallback = o,
		this.uiElem = i
	}
	return __extends(t, e),
	t.prototype.buy = function (t) {
		var a = t.byteCount;
		return this.canBuy(t) ? (restEventCreator.onBuySpecialUpg(this, a), null != this.buyCallback && this.buyCallback(this.uiElem), e.prototype.buy.call(this, t), UIManager.onUpgradePurchase(null), !0) : !1
	},
	t.prototype.load = function () {
		e.prototype.load.call(this),
		this.showElem()
	},
	t.prototype.showElem = function () {
		this.uiElem.show()
	},
	t.prototype.renderHtml = function (e) {
		var t = '<div id="upg%s" class="upgcontainer"> <div class="specialItem" style="background-image: url(\'img/' + this.image + "')\"></div>" + '<div class="upgprice">%s</div> ' + "</div>";
		return _.str.sprintf(t, e, NumUtils.byteConvert(this.price, 2))
	},
	t
}
(UpgradeBase), PersonalDripUpgrade = function (e) {
	function t(t, a, r, n) {
		e.call(this, t, a, r, n, createPersonalDripsHelpDlg, null)
	}
	return __extends(t, e),
	t.prototype.showElem = function () {
		showPersonalDrips(!1)
	},
	t
}
(SpecialUpgrade), JVMDripUpgrade = function (e) {
	function t(t, a, r, n) {
		e.call(this, t, a, r, n, createDrippedJVMsDlg, null)
	}
	return __extends(t, e),
	t.prototype.showElem = function () {
		showDrippedJVMs(!1)
	},
	t
}
(SpecialUpgrade), MineUpgrade = function (e) {
	function t(t, a, r, n) {
		e.call(this, t, a, r, n, createMiningDlg, null)
	}
	return __extends(t, e),
	t.prototype.showElem = function () {
		showMiningActivity(!1)
	},
	t
}
(SpecialUpgrade), Upgrade = function (e) {
	function t(t, a, r) {
		e.call(this, t, a, r),
		this.imgYIdx = 0,
		this.imgXIdx = 0,
		this._unlocked = !1
	}
	return __extends(t, e),
	t.prototype.unlock = function () {
		this._unlocked || (this._unlocked = !0, storeUI.rebuildUpgrades = !0)
	},
	t.prototype.buy = function (t) {
		var a = t.byteCount,
		r = e.prototype.buy.call(this, t);
		return r && (this.powerup.purchaseUpgrade(this), restEventCreator.onBuyUpg(this, a)),
		r
	},
	Object.defineProperty(t.prototype, "unlocked", {
		get : function () {
			return this._unlocked
		},
		enumerable : !0,
		configurable : !0
	}),
	t.prototype.renderHtml = function (e) {
		var t = -50 * this.imgXIdx,
		a = -50 * this.imgYIdx,
		r = '<div id="upg%s" class="upgcontainer"> <div class="item" style="background-position:%s %s"></div><div class="upgprice">%s</div> </div>';
		return _.str.sprintf(r, e, t + "px", a + "px", NumUtils.byteConvert(this.price, 2))
	},
	t
}
(UpgradeBase), PowerupFactory = function () {
	function e() {
		this.imgYIdx = 0,
		this.powerUps = []
	}
	return e.prototype.push = function (e) {
		e.upgradeImgYIndex = this.imgYIdx,
		this.powerUps.push(e),
		this.imgYIdx++
	},
	e.createSpecialUpgrades = function () {
		var e = [],
		t = new SpecialUpgrade("Leaderboard", "A leaderboard to see your score and ranking compared to other players in real time", 60, "leaderboard.png", createLeaderboardDlg, uiElemManager.leaderboard),
		a = new SpecialUpgrade("BPS Distribution Graph", "A graph that shows you how your total Bytes Per Second (BPS) are distributed amongst various powerups", 120, "graph.png", createBPSGraphHelpDlg, uiElemManager.bpsChart),
		r = new PersonalDripUpgrade("Personal Drips", "See your personal dripping activity", 40, "personaldrip.png"),
		n = new JVMDripUpgrade("Dripped JVMs", "Monitor the dripping activity of all your JVMs", 150, "drippedJVM.png"),
		o = new MineUpgrade("Global Mine", "Monitor all the mined Spring Beans to unlock 'Spring Framework'", 400, "mine.png");
		return e.push(t),
		e.push(a),
		e.push(r),
		e.push(n),
		e.push(o),
		e
	},
	e.prototype.createPowerups = function () {
		var e = new PowerUp(20, 1, "Cursor", "Automatically generate new objects without needing to click");
		this.push(e),
		e.addUpgrade(new Upgrade("Enhanced Precision", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate 10% of BPS", "30", 1)).addUpgrade(new Upgrade("Sharp Shooter", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "200", 1)).addUpgrade(new Upgrade("Click of Power", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "800", 2)).addUpgrade(new Upgrade("Click of Carmack", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "3kb", 4)).addUpgrade(new Upgrade("Click of God", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "15kb", 8)).addUpgrade(new Upgrade("Click monster", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "120kb", 8)).addUpgrade(new Upgrade("Double handed", "Cursor generates 1.1x more objects.<br/>Coffe cup clicks generate additional 10% of BPS", "1.1mb", 8)),
		e.image = "cursor.png",
		e = new PowerUp(100, 3, "Brogrammer", "A complete bro. Writes code that leaks a ton of memory"),
		this.push(e),
		e.addUpgrade(new Upgrade("Shades", "Brogrammers generates 1.1x more memory", "300", 1)).addUpgrade(new Upgrade("Designer Shades", "Brogrammers generates 1.1x more memory", "1.5kb", 1)).addUpgrade(new Upgrade("RedBull", "Brogrammers generates 1.1x more memory", "4kb", 3)).addUpgrade(new Upgrade("Designer Jeans", "Brogrammers generates 1.1x more memory", "25kb", 6)).addUpgrade(new Upgrade("Designer Watch", "Brogrammers generates 1.1x more memory", "300kb", 40)).addUpgrade(new Upgrade("Weights", "Brogrammers generates 1.1x more memory", "2mb", 75)),
		e.image = "bro.png",
		e = new PowerUp(500, 5, "GC Failure", "Garbage Collection failure leads to more memory"),
		this.push(e),
		e.addUpgrade(new Upgrade("Extended Failure", "GC Failure  generates 1.1x more memory", "1kb", 1)).addUpgrade(new Upgrade("Delayed Collection", "GC Failure  generates 1.1x more memory", "8kb", 2)).addUpgrade(new Upgrade("Concurrent GC", "GC Failure  generates 1.1x more memory", "35kb", 2)).addUpgrade(new Upgrade("Optimized GC", "GC Failure  generates 1.1x more memory", "400kb", 2)).addUpgrade(new Upgrade("Mark and Sweep GC", "GC Failure  generates 1.1x more memory", "3mb", 2)).addUpgrade(new Upgrade("Parallel GC", "GC Failure  generates 1.1x more memory", "12mb", 2)).addUpgrade(new Upgrade("Sequential GC", "GC Failure  generates 1.1x more memory", "56mb", 2)).addUpgrade(new Upgrade("G1 Collector", "GC Failure  generates 1.1x more memory", "680mb", 2)).addUpgrade(new Upgrade("Low Pause GC", "GC Failure  generates 1.1x more memory", "5gb", 2)),
		e.image = "gcfailure.png";
		var t = new PowerUp("2kb", 8, "Memory Leak", "Generate a leak to use more memory");
		this.push(t),
		t.addUpgrade(new Upgrade("Dangling Pointers", "Memory Leak  generates 1.1x more memory", "6kb", 1)).addUpgrade(new Upgrade("DOS attack", "Memory Leak  generates 1.1x more memory", "80kb", 1)).addUpgrade(new Upgrade("DDOS attack", "Memory Leak  generates 1.1x more memory", "800kb", 40)).addUpgrade(new Upgrade("Stack Overflow", "Memory Leak  generates 1.1x more memory", "7mb", 40)).addUpgrade(new Upgrade("Uncaught Exceptions", "Memory Leak  generates 1.1x more memory", "21mb", 40)).addUpgrade(new Upgrade("Circular Reference", "Memory Leak  generates 1.1x more memory", "70mb", 40)).addUpgrade(new Upgrade("Floating Point Error", "Memory Leak  generates 1.1x more memory", "600mb", 40)),
		t.image = "memleak.png";
		var a = new PowerUp("10kb", 15, "Message Queue", "A queue brings in more objects from the network");
		this.push(a),
		a.addUpgrade(new Upgrade("Queue Overflow", "Message Queue  generates 1.1x more memory", "60kb", 3)).addUpgrade(new Upgrade("FIFO queue", "Message Queue  generates 1.1x more memory", "600kb", 10)).addUpgrade(new Upgrade("Extra large queues", "Message Queue  generates 1.1x more memory", "4mb", 20)).addUpgrade(new Upgrade("Additional queues", "Message Queue  generates 1.1x more memory", "18mb", 40)).addUpgrade(new Upgrade("Extra Connections", "Message Queue  generates 1.1x more memory", "82mb", 60)).addUpgrade(new Upgrade("Persistent Queue", "Message Queue  generates 1.1x more memory", "1gb", 60)).addUpgrade(new Upgrade("Queue Redundancy", "Message Queue  generates 1.1x more memory", "3gb", 60)).addUpgrade(new Upgrade("Multi-Cloud Queue ", "Message Queue  generates 1.1x more memory", "6gb", 60)),
		a.image = "msgqueue.png";
		var r = new PowerUp("100kb", 60, "Database", "Read data from a database into memory");
		this.push(r),
		r.addUpgrade(new Upgrade("NoSQL Datbase", "Database generates 1.1x more memory", "500kb", 4)).addUpgrade(new Upgrade("In Memory Datbase", "Database generates 1.1x more memory", "9mb", 15)).addUpgrade(new Upgrade("ACID Transactions", "Database generates 1.1x more memory", "35mb", 35)).addUpgrade(new Upgrade("Embedded Database", "Database generates 1.1x more memory", "98mb", 35)).addUpgrade(new Upgrade("Distributed Database", "Database generates 1.1x more memory", "200mb", 35)).addUpgrade(new Upgrade("SQL Joins", "Database generates 1.1x more memory", "280mb", 35)).addUpgrade(new Upgrade("Query Optimizer", "Database generates 1.1x more memory", "360mb", 35)).addUpgrade(new Upgrade("Replica Set", "Database generates 1.1x more memory", "940mb", 35)).addUpgrade(new Upgrade("Key Value Database", "Database generates 1.1x more memory", "6.2gb", 35)),
		r.image = "db.png";
		var n = new PowerUp("1mb", 200, "Cache", "A large cache of memory");
		this.push(n),
		n.addUpgrade(new Upgrade("Extra Large Cache", "Cache  generates 1.1x more memory", "5mb", 5)).addUpgrade(new Upgrade("High Availibility Cache", "Cache  generates 1.1x more memory", "42mb", 15)).addUpgrade(new Upgrade("Persistant Cache", "Cache  generates 1.1x more memory", "122mb", 25)).addUpgrade(new Upgrade("Elastic Cache", "Cache  generates 1.1x more memory", "222mb", 40)).addUpgrade(new Upgrade("Clustered Cache", "Cache  generates 1.1x more memory", "900mb", 40)).addUpgrade(new Upgrade("High Speed Cache", "Cache  generates 1.1x more memory", "1400mb", 40)).addUpgrade(new Upgrade("Long Term Storage", "Cache  generates 1.1x more memory", "4gb", 40)),
		n.image = "cache.png";
		var o = new PowerUp("10mb", 800, "CPU", "More CPUs generate more memory");
		this.push(o),
		o.addUpgrade(new Upgrade("Triple Cores", "CPU  generates 1.1x more memory", "25mb", 3)).addUpgrade(new Upgrade("Quad Cores", "CPU  generates 1.1x more memory", "180mb", 10)).addUpgrade(new Upgrade("Penta Cores", "CPU  generates 1.1x more memory", "300mb", 20)).addUpgrade(new Upgrade("Hexa Cores", "CPU  generates 1.1x more memory", "392mb", 40)).addUpgrade(new Upgrade("Hepta Cores", "CPU  generates 1.1x more memory", "460mb", 60)).addUpgrade(new Upgrade("Octa Cores", "CPU  generates 1.1x more memory", "800mb", 90)).addUpgrade(new Upgrade("Deca Cores", "CPU  generates 1.1x more memory", "1400mb", 120)).addUpgrade(new Upgrade("Icosa Cores", "CPU  generates 1.1x more memory", "2200mb", 150)).addUpgrade(new Upgrade("High speed fans", "CPU  generates 1.1x more memory", "3000mb", 150)).addUpgrade(new Upgrade("Power efficiency", "CPU  generates 1.1x more memory", "7gb", 150)),
		o.image = "cpu.png";
		var i = new PowerUp("50mb", 5e3, "GPU", "Use a high speed GPU to generate memory at a faster rate");
		this.push(i),
		i.addUpgrade(new Upgrade("SLI", "GPU  generates 1.1x more memory", "150mb", 3)).addUpgrade(new Upgrade("3 Way SLI", "GPU  generates 1.1x more memory", "250mb", 15)).addUpgrade(new Upgrade("4 Way SLI", "GPU  generates 1.1x more memory", "332mb", 30)).addUpgrade(new Upgrade("4 GPUs", "GPU  generates 1.1x more memory", "422mb", 50)).addUpgrade(new Upgrade("6 Way SLI", "GPU  generates 1.1x more memory", "482mb", 75)).addUpgrade(new Upgrade("Liquid Cooling", "GPU  generates 1.1x more memory", "1200mb", 75)),
		i.image = "gpu.png";
		var s = new PowerUp("500mb", 55e3, "Cluster", "A whole cluster of JVMs to generate memory");
		this.push(s),
		s.addUpgrade(new Upgrade("Beowolf Cluster", "Cluster  generates 1.1x more memory", "560mb", 3)).addUpgrade(new Upgrade("Botnet Cluster", "Cluster  generates 1.1x more memory", "620mb", 15)).addUpgrade(new Upgrade("P2P Network", "Cluster  generates 1.1x more memory", "750mb", 25)).addUpgrade(new Upgrade("Data Grid", "Cluster  generates 1.1x more memory", "2gb", 40)).addUpgrade(new Upgrade("Redundant connections", "Cluster  generates 1.1x more memory", "8gb", 40)).addUpgrade(new Upgrade("Faster network", "Cluster  generates 1.1x more memory", "12gb", 40)),
		s.image = "cluster.png";
		var p = new PowerUp("2gb", 25e4, "Spring Framework", 'Use the powerful <a href="http://spring.io" target="_blank"> Spring Framework </a> to process tons of data');
		return this.push(p),
		p.addUpgrade(new Upgrade("Spring MVC", "Spring Framework  generates 1.1x more memory", "5gb", 3)).addUpgrade(new Upgrade("Spring Security", "Spring Framework  generates 1.1x more memory", "9gb", 15)).addUpgrade(new Upgrade("Spring Boot", "Spring Framework  generates 1.1x more memory", "12gb", 25)).addUpgrade(new Upgrade("Spring Data", "Spring Framework  generates 1.1x more memory", "15gb", 40)).addUpgrade(new Upgrade("Spring Batch", "Spring Framework  generates 1.1x more memory", "16gb", 40)).addUpgrade(new Upgrade("Spring Social", "Spring Framework  generates 1.1x more memory", "17.5gb", 40)).addUpgrade(new Upgrade("Spring Integration", "Spring Framework  generates 1.1x more memory", "18.2gb", 40)).addUpgrade(new Upgrade("Spring AMQP", "Spring Framework  generates 1.1x more memory", "20gb", 40)).addUpgrade(new Upgrade("Spring XD", "Spring Framework  generates 1.1x more memory", "21gb", 40)),
		p.image = "spring.png",
		this.powerUps
	},
	e
}
(), StoreUI = function () {
	function e() {
		this.rebuildUpgrades = !0,
		this.shownUpgrades = []
	}
	return e.createInitial = function () {
		var t = '<div class="row">                    <div style="text-align:center;" class="col-xs-12">                        <div style="font-weight:bolder; font-size:24px; padding-bottom:2px">Powerup Store</div>                    </div>            </div>            <div class="row">                <div id="upgrades" class="col-xs-12">                </div>            </div>            <div class="row">                <div id="powerupstore" class="col-xs-12"></div>            </div>';
		$("#storeColumn").append(t),
		e.createPowerupElem(0),
		e.addPowerupEventHandler(0)
	},
	e.fetchUnlockedUpgrades = function () {
		var e = [];
		return _.each(localStats.powerUps, function (t) {
			var a = _.where(t.upgrades, {
					unlocked : !0
				});
			e.push.apply(e, a)
		}),
		e
	},
	e.prototype.updateUpgradeStates = function (e) {
		_.each(this.shownUpgrades, function (t, a) {
			t.updateAvailibility(e),
			$("#upg" + (a + 1)).toggleClass("disabled", !t.available)
		})
	},
	e.prototype.drawUpgrades = function () {
		if (this.rebuildUpgrades) {
			var t = [];
			t.push.apply(t, e.fetchUnlockedUpgrades()),
			t.push.apply(t, localStats.fetchAvailableSpecialUpgrades()),
			t = _.sortBy(t, function (e) {
					return e.price
				});
			var a = "";
			_.each(t, function (e, t) {
				a += e.renderHtml(t + 1)
			}),
			$("#upgrades").html(a),
			_.each(t, function (e, t) {
				var a = "#upg" + (t + 1);
				Tooltip.addHandlers(a, null, e),
				$(a).click(function (e, t) {
					return function (a) {
						a.preventDefault(),
						e.buy(localStats) && popManager.newPop(t, "+" + e.name)
					}
				}
					(e, "upg" + (t + 1)))
			}),
			this.shownUpgrades = t,
			this.rebuildUpgrades = !1
		}
	},
	e.createRestOfThem = function () {
		for (var t = 1; localStats.powerUps.length > t; t++)
			e.createPowerupElem(t);
		for (var t = 1; localStats.powerUps.length > t; t++)
			e.addPowerupEventHandler(t)
	},
	e.addPowerupEventHandler = function (e) {
		var t = "#pu" + (e + 1),
		a = localStats.powerUps[e];
		$(t).click(function (e, t) {
			return function (a) {
				AnonymousUserManager.canBuyPowerUp(e) && (a.preventDefault(), e.buy(localStats) && popManager.newPop(t, "+1 " + e.name))
			}
		}
			(a, "pu" + (e + 1))),
		$(t + " .storeItemName").text(a.name),
		$(t + " .storeItemDesc").text(a.desc)
	},
	e.createPowerupElem = function (e) {
		var t = localStats.powerUps[e],
		a = 'style="background-image: url(img/' + t.image + ');"',
		r = "pu" + (e + 1),
		n = '<div id="' + r + '" class="storeItem"' + (a ? a : null) + '>                        <div class="storeItemAmount"/><div class="storeItemName"/>                        <div>                            <div class="storePrice"/>                        </div>                    </div>';
		$("#powerupstore").append(n),
		Tooltip.addHandlers("#" + r, t, null),
		ui.updatePowerupButton(t)
	},
	e
}
(), storeUI = new StoreUI, Tooltip = function () {
	function e() {
		this.text = "",
		this.x = 0,
		this.y = 0,
		this.origin = 0
	}
	return e.addHandlers = function (e, t, a) {
		var r = null != t ? "left" : "bottom-right",
		n = springPowerup.isSpring(t);
		$(e).mouseenter(function (e) {
			gameTooltip.draw(e.currentTarget, 0, 0, r, t, a)
		}),
		$(e).mouseleave(function (e) {
			if (n) {
				var t = e.relatedTarget.id;
				if ("tooltip" === t || "tooltipAnchor" === t)
					return
			}
			gameTooltip.hide()
		})
	},
	e.prototype.hide = function () {
		el("tooltipAnchor").style.display = "none"
	},
	e.prototype.draw = function (e, t, a, r, n, o) {
		this.x = t,
		this.y = a,
		this.origin = r;
		var i = e.getBoundingClientRect(),
		t = 0,
		a = 0,
		s = el("tooltip");
		s.style.top = "0",
		s.style.right = "0";
		var p = el("tooltipAnchor");
		if (p.style.display = "block", "left" == this.origin ? (t = i.left, a = i.top) : "bottom-right" == this.origin ? (t = i.right, a = i.bottom + 30) : alert("Tooltip anchor " + this.origin + " needs to be implemented"), null == o) {
			var l = "";
			if (n.purchasedUpgrades.length > 0) {
				var u = "";
				_.each(n.purchasedUpgrades, function (e) {
					u += _.str.sprintf("<li>%s</li>", e.name)
				}),
				l = _.str.sprintf("<div style='font-weight: bold'>Upgrades</div><ul>%s</ul>", u)
			}
			var c = "<div>" + n.desc + "</div>";
			springPowerup.isSpring(n) && (c += "<div><i>" + springPowerup.getTooltipFooter() + "</i></div>"),
			s.innerHTML = this.heading(n) + c + "<br/><div>Owned: " + n.count + "</div>" + l
		} else {
			var d = NumUtils.byteConvert(o.price, 2),
			m = this.heading(o);
			s.innerHTML = m + "<div>" + o.desc + "</div>" + '<br/><div style="font-weight: bold">Price: <span class="upgPrice">' + d + "</span></div>"
		}
		var h = springPowerup.hasFooter(n) ? 150 : 0;
		p.style.left = Math.floor(t + this.x) + "px",
		p.style.top = Math.floor(a - this.y - h) + "px",
		$("#tooltipAnchor").mouseleave(function () {
			gameTooltip.hide()
		})
	},
	e.prototype.heading = function (e) {
		return '<div style="font-weight: bold">' + e.name + "</div>"
	},
	e
}
(), __extends = this.__extends || function (e, t) {
	function a() {
		this.constructor = e
	}
	for (var r in t)
		t.hasOwnProperty(r) && (e[r] = t[r]);
	a.prototype = t.prototype,
	e.prototype = new a
}, BPSChart = function (e) {
	function t() {
		e.call(this, "#bpsChartContainer"),
		this.chart = null
	}
	return __extends(t, e),
	t.prototype.initUI = function () {
		for (var e = {
				chart : {
					renderTo : "bpsChartContainer",
					type : "bar",
					height : 180
				},
				title : {
					text : "BPS Distribution"
				},
				plotOptions : {
					series : {
						stacking : "normal"
					}
				},
				xAxis : {
					title : {
						text : null
					},
					categories : ["Contribution to Total BPS"],
					labels : {
						enabled : !1
					}
				},
				yAxis : {
					min : 0,
					title : {
						text : null
					},
					endOnTick : !1
				},
				tooltip : {
					valueSuffix : " bytes/second"
				},
				credits : {
					enabled : !1
				},
				series : []
			}, t = localStats.powerUps.length - 1; t >= 0; t--) {
			var a = localStats.powerUps[t];
			e.series.push({
				name : a.name,
				data : [0],
				index : t
			})
		}
		this.chart = new Highcharts.Chart(e)
	},
	t.prototype.update = function (e) {
		var t = localStats.powerUps.indexOf(e),
		a = e.fetchTotalBps(),
		r = this.chart.series[t].data[0];
		r.update(a)
	},
	t
}
(UIElem), DripChart = function (e) {
	function t() {
		e.call(this, "#chartContainer"),
		this.dripChartObj = null,
		this.tabShown = !0
	}
	return __extends(t, e),
	t.prototype.initUI = function () {
		var e = createChartPointStartTime(),
		a = {
			chart : {
				renderTo : "chartContainer",
				type : "area",
				events : {
					load : function () {
						var e = this;
						setInterval(function () {
							var a = !0,
							r = e.series[0],
							n = e.series[1];
							5 > n.data.length && (a = !1),
							r.addPoint(t.defaultValue, !0, a, !1),
							n.addPoint(t.defaultValue, !0, a)
						}, 6e4)
					}
				}
			},
			credits : {
				enabled : !1
			},
			legend : {
				enabled : !0
			},
			title : {
				text : "Memory Dripping Activity"
			},
			plotOptions : {
				area : {
					stacking : "normal"
				}
			},
			xAxis : {
				type : "datetime",
				dateTimeLabelFormats : {
					millisecond : "%H:%M",
					second : "%H:%M:%S"
				},
				showFirstLabel : !0,
				showLastLabel : !0,
				tickInterval : 6e4
			},
			yAxis : {
				title : {
					text : null
				},
				labels : {
					formatter : function () {
						return NumUtils.byteConvert(this.value, 1)
					}
				},
				type : "logarithmic"
			},
			tooltip : {
				formatter : function () {
					var e = "";
					return _.each(this.points, function (t) {
						e += _.str.sprintf("<br/>%s: %s", t.series.name, NumUtils.byteConvert(t.y, 2))
					}),
					"<b>Amount Dripped</b>" + e
				},
				shared : !0
			},
			series : [{
					name : "Others",
					data : [1, 1],
					pointStart : e,
					pointInterval : 6e4,
					index : 0,
					color : "#988a7b"
				}, {
					name : "You",
					data : [1, 1],
					pointStart : e,
					pointInterval : 6e4,
					index : 1,
					color : "#44bb55"
				}
			]
		};
		Highcharts.setOptions({
			global : {
				useUTC : !1
			}
		}),
		this.dripChartObj = new Highcharts.Chart(a)
	},
	t.prototype.showSeries_Others = function (e) {
		e ? this.dripChartObj.series[0].show() : this.dripChartObj.series[0].hide()
	},
	t.prototype.isOthersSeriesVisible = function () {
		return this.dripChartObj.series[0].visible
	},
	t.prototype.updateChart = function (e, t) {
		var a = 1;
		t && (a = 0);
		var r = this.dripChartObj.series[a].data,
		n = r[r.length - 1];
		n.update(n.y + e)
	},
	t.defaultValue = .001,
	t
}
(TabbedUIElem), SeriesRange = function () {
	function e(e, t, a) {
		this.seriesIndex = e,
		this.min = t,
		this.max = a
	}
	return e.prototype.withinRange = function (e) {
		return e >= this.min && (0 == this.max || this.max >= e) ? !0 : !1
	},
	e
}
(), JVMDripTab = function (e) {
	function t() {
		e.call(this, "#jvmTabContent"),
		this.lastUpdateTime = 0,
		this.uiUpdateTime = 0,
		this.jvms = []
	}
	return __extends(t, e),
	t.prototype.initUI = function () {
		loggedIn ? (uiElemManager.dripJVMGrid.display(), uiElemManager.dripJVMSignup.displayNone(), $("#dripJVMAddButton").click(function () {
				NavbarAccount.navigateAway(),
				window.location.href = URL_ADDJVM
			})) : (uiElemManager.dripJVMGrid.displayNone(), uiElemManager.dripJVMSignup.display(), $("#dripJVMSignupButton").click(function () {
				SignupForm.showDialog(!0)
			}))
	},
	t.prototype.update = function (e) {
		this.jvms = null != e && e.length > 0 ? e : [];
		for (var t = 0; this.jvms.length > t; t++) {
			var a = this.jvms[t],
			r = Math.max(0, 60 - a.gameTimer);
			if (a.dripsIn = moment.duration(r, "minutes"), a.beanTimer > 0) {
				var n = Math.max(0, 1440 - a.beanTimer);
				a.beansIn = moment.duration(n, "minutes")
			}
			a.boostedDrip = a.beanTimer > 0
		}
		this.redrawTable(),
		this.uiUpdateTime = this.lastUpdateTime = (new Date).getTime()
	},
	t.prototype.updateOnFrame = function () {
		loggedIn && localStats.jvmDripUpgrade.purchased && (this.updateUI(), this.loadFromNetwork())
	},
	t.prototype.redrawTable = function () {
		for (var e = "", a = 0; this.jvms.length > a; a++)
			e += t.createRow(this.jvms[a]);
		$("#dripJVMTable tbody").html(e)
	},
	t.prototype.updateUI = function () {
		if (this.jvms.length > 0 && this.uiUpdateTime > 0) {
			var e = moment.duration((new Date).getTime() - this.uiUpdateTime).asMinutes();
			if (e >= 1) {
				for (var t = Math.floor(e), a = 0; this.jvms.length > a; a++)
					this.jvms[a].dripsIn.subtract(t, "minutes"), 0 === this.jvms[a].dripsIn.asMinutes() && (this.jvms[a].dripsIn = moment.duration(60, "minutes"));
				this.redrawTable(),
				this.uiUpdateTime = (new Date).getTime()
			}
		}
	},
	t.createRow = function (e) {
		var t = NumUtils.byteConvert(e.dripAmount, 2),
		a = e.boostedDrip ? "Yes" : "No",
		r = 0 === e.beanTimer ? "Doesnt mine" : e.beansIn.format("h [hrs] m [min]");
		return "<tr><td>" + e.app + "</td>" + "<td>" + t + "</td>" + "<td>" + e.dripsIn.asMinutes() + " mins</td><td>" + r + "</td><td>" + a + "</td></tr>"
	},
	t.prototype.loadFromNetwork = function () {
		var e = (new Date).getTime();
		e - this.lastUpdateTime >= t.UPDATE_INTERVAL && DataSaver.fetchJVMData()
	},
	t.UPDATE_INTERVAL = 3e5,
	t
}
(TabbedUIElem), MinePanel = function (e) {
	function t() {
		e.call(this, "#mineTabContainer")
	}
	return __extends(t, e),
	t.prototype.initUI = function () {
		$("#btnMineGrab").click(function () {
			Mine.onGrab()
		}),
		$("#btnMineInfo").click(function () {
			Mine.showMiningInfoDlg()
		})
	},
	t
}
(TabbedUIElem), PersonalDripChart = function (e) {
	function t() {
		e.call(this, "#personalChartContainer"),
		this.chartObj = null,
		this.ranges = [],
		this.lastBps = -1,
		this.colorMap = {}

	}
	return __extends(t, e),
	t.prototype.initColorMap = function () {
		this.colorMap[1] = ["#D87039", "#BC390D", "#bc719e"],
		this.colorMap[1e3] = ["#a538b6", "#1bb574", "#3aa5bd"],
		this.colorMap[Units.MB] = ["#0f798b", "#ad128c", "#ad4a4a"],
		this.colorMap[Units.GB] = ["#c08572", "#83c0b3", "#2FA3C0"]
	},
	t.prototype.initUI = function () {
		this.initColorMap();
		var e = {
			chart : {
				renderTo : "personalChartContainer",
				type : "area",
				events : {
					load : function () {
						var e = this;
						setInterval(function () {
							var t = !0;
							5 > e.series[0].data.length && (t = !1),
							_.each(e.series, function (e) {
								e.addPoint(0, !0, t, !1)
							})
						}, 6e4)
					}
				}
			},
			credits : {
				enabled : !1
			},
			legend : {
				enabled : !0
			},
			title : {
				text : "Personal Dripping Activity"
			},
			plotOptions : {
				area : {
					stacking : "normal"
				}
			},
			xAxis : {
				type : "datetime",
				dateTimeLabelFormats : {
					millisecond : "%H:%M",
					second : "%H:%M:%S"
				},
				showFirstLabel : !0,
				showLastLabel : !0,
				tickInterval : 6e4
			},
			yAxis : {
				title : {
					text : null
				},
				labels : {
					formatter : function () {
						return NumUtils.byteConvert(this.value, 1)
					}
				}
			},
			tooltip : {
				formatter : function () {
					var e = "";
					return _.each(this.points, function (t) {
						e += _.str.sprintf("<br/>%s: %s", t.series.name, NumUtils.byteConvert(t.y, 2))
					}),
					"<b>Amount Dripped</b>" + e
				},
				shared : !0
			}
		};
		Highcharts.setOptions({
			global : {
				useUTC : !1
			}
		}),
		this.chartObj = new Highcharts.Chart(e),
		this.createSeries(0)
	},
	t.prototype.onUpdateBps = function (e) {
		if (-1 == this.lastBps)
			this.updateSeries(e);
		else if (e > this.lastBps)
			if (NumUtils.getUnit(e) != this.lastBpsUnit)
				this.updateSeries(e);
			else {
				var a = t.BPS_SWITCH_RATE * this.lastBpsUnit;
				a > this.lastBps && e >= a && this.updateSeries(e)
			}
	},
	t.prototype.updateSeries = function (e) {
		this.storeBps(e),
		this.createSeries(e)
	},
	t.prototype.storeBps = function (e) {
		this.lastBps = e,
		this.lastBpsUnit = NumUtils.getUnit(e)
	},
	t.prototype.createSeries = function (e) {
		for (; this.chartObj.series.length > 0; )
			this.chartObj.series[0].remove(!0);
		this.ranges = [],
		this.pointStart = createChartPointStartTime(),
		this.curIndex = t.MAX_SERIES_INDEX,
		this.createDynamicSeries(e, 1, "Bytes", "#FFBD62"),
		this.createDynamicSeries(e, 1e3, "kB", "#A58CB6"),
		this.createDynamicSeries(e, Units.MB, "MB", "#01538B"),
		this.createDynamicSeries(e, Units.GB, "GB", "#C0421A"),
		this.chartObj.redraw()
	},
	t.prototype.createDynamicSeries = function (e, a, r, n) {
		var o = 1e3 * a,
		i = !1;
		if (e >= a && o > e || 0 == e && 1 == a) {
			var s,
			p = this.colorMap[a],
			l = a * t.BPS_SWITCH_RATE;
			l > e ? (s = 10, this.chartObj.addSeries(this.createSingleSeries(r, a, s * a - 1, n)), this.createSeriesHelper(s, 100, r, a, p[0]), this.createSeriesHelper(100, 1e3, r, a, p[1])) : (s = 100, this.chartObj.addSeries(this.createSingleSeries(r, a, s * a - 1, n)), this.createSeriesHelper(s, 500, r, a, p[1]), this.createSeriesHelper(500, 1e3, r, a, p[2])),
			i = !0
		}
		i || this.chartObj.addSeries(this.createSingleSeries(r, a, o - 1, n))
	},
	t.prototype.createSeriesHelper = function (e, t, a, r, n) {
		this.chartObj.addSeries(this.createSingleSeries(">=" + e + " " + a, r * e, r * t - 1, n))
	},
	t.prototype.createSingleSeries = function (e, a, r, n) {
		var o = this.curIndex--;
		return this.ranges.push(new SeriesRange(o, a, r)), {
			name : e,
			data : [0, 0],
			pointStart : this.pointStart,
			pointInterval : 6e4,
			index : o,
			color : n,
			legendIndex : t.MAX_SERIES_INDEX - o
		}
	},
	t.prototype.fetchSeriesIndexToUpdate = function (e) {
		var t = -1;
		return _.each(this.ranges, function (a) {
			a.withinRange(e) && (t = a.seriesIndex)
		}),
		t
	},
	t.prototype.updateChartOnDrip = function (e) {
		var t = this.fetchSeriesIndexToUpdate(e),
		a = this.chartObj.series[t].data,
		r = a[a.length - 1];
		r.update(r.y + e)
	},
	t.MAX_SERIES_INDEX = 5,
	t.BPS_SWITCH_RATE = 20,
	t
}
(TabbedUIElem), ProgressBars = function () {
	function e() {}

	return e.updateGlobalBar = function () {
		if (globalStats.totalBytes > 0) {
			var e = 100 * globalStats.usedBytes / globalStats.totalBytes;
			e > 100 && (e = 100),
			el("globalProgressBar").style.width = e + "%",
			globalStats.usedBytes >= globalStats.totalBytes && $("#globalHeapMsg1").html("DripStat <b>Level " + curGameLevel + "</b> crossed. <b>Level " + (curGameLevel + 1) + "</b> will begin shortly.<div>Patience you must have, my young padawan...</div>")
		}
	},
	e.updateLocalBar = function () {
		var e = 100 * localStats.byteCount / localStats.memoryCapacity;
		el("localProgressBar").style.width = e + "%"
	},
	e
}
(), UsernameGenerator = function () {
	function e() {}

	return e.createNetworkUser = function (e, t) {
		restEventCreator.init(),
		networkUser = new NetworkUser(e.username, e.userid),
		null != t && dataSaver.loadData(t.data),
		dataSaver.initSaveLoop(),
		DataSaver.fetchLeaderboard()
	},
	e.prototype.createRandomizedUsername = function () {
		$.post(GAME_URL + "genrandomuser", null, function (t) {
			e.createNetworkUser(t, null)
		})
	},
	e.prototype.displayGame = function (e) {
		gameInited = !0,
		!e || noStory ? uiElemManager.initWithoutStory() : StoryNotificationQueue.initUI()
	},
	e.prototype.fetchStoredUser = function () {
		var t = this;
		$.post(GAME_URL + "userdata", null, function (a) {
			loggedIn = !0;
			var r;
			r = a.data === void 0 ? null : a,
			t.displayGame(null == r || !r.data.storyDone),
			e.createNetworkUser({
				username : r.user,
				userid : r.id
			}, r),
			uiElemManager.navbarAccount.display()
		}).fail(function (e) {
			var a = e.status;
			401 === a && (loggedIn = !1, t.displayGame(!0), uiElemManager.navbarAnonymous.display(), t.createRandomizedUsername())
		})
	},
	e
}
(), NetworkUser = function () {
	function e(e, t) {
		this.userName = e,
		this.userId = t
	}
	return e
}
(), LeaderBoardUI = function () {
	function e() {}

	return e.createLeaderboardTable = function (t) {
		if (t !== void 0 && null != t && t.length > 0) {
			for (var a = "<tbody>", r = !1, n = 0; t.length > n; n++) {
				var o = t[n],
				i = !1,
				s = "<tr>";
				null != networkUser && o.name === networkUser.userName && (s = "<tr class='success'>", i = !0, r = !0),
				a += i ? _.str.sprintf(s + "<td>%s</td><td><a id='ldbdUser' href='#'>%s</a></td><td>%s</td></tr>", o.rank, o.name, NumUtils.byteConvert(o.score, 2)) : _.str.sprintf(s + "<td>%s</td><td>%s</td><td>%s</td></tr>", o.rank, o.name, NumUtils.byteConvert(o.score, 2))
			}
			a += "</tbody>",
			$("#leaderBoard table")[0].innerHTML = a,
			r && e.lbdName.initHandlers()
		}
	},
	e.lbdName = new LeaderboardName,
	e
}
(), GameEventType;
(function (e) {
	e[e.SAVE = 1] = "SAVE",
	e[e.DRIP = 2] = "DRIP",
	e[e.BUY = 3] = "BUY",
	e[e.BUY_UPG = 4] = "BUY_UPG",
	e[e.SAVE_STORY_DONE = 5] = "SAVE_STORY_DONE",
	e[e.BUY_SP_UPG = 6] = "BUY_SP_UPG"
})(GameEventType || (GameEventType = {}));
var RestEventManager = function () {
	function e() {
		this.queue = [],
		this.flushInProgress = !1,
		this.lastFlushTime = 0
	}
	return e.prototype.init = function () {
		this.lastFlushTime = (new Date).getTime()
	},
	e.prototype.flushDone = function () {
		this.flushInProgress = !1
	},
	e.prototype.doFlush = function (t) {
		var a = this;
		t === void 0 && (t = !0);
		var r = e.createEventData(this.queue);
		return this.flushInProgress = !0,
		this.queue = [],
		this.postEventData(r, function (e) {
			LeaderBoardUI.createLeaderboardTable(e.lb),
			a.lastFlushTime = (new Date).getTime(),
			a.flushInProgress = !1
		}, t)
	},
	e.prototype.flushIntervalDone = function () {
		var t = (new Date).getTime();
		return t - this.lastFlushTime >= e.AUTO_FLUSH_INTERVAL
	},
	e.prototype.shouldflushQueue = function () {
		if (!this.flushInProgress) {
			if (this.flushIntervalDone())
				return !0;
			if (this.queue.length > 1) {
				if (this.queue.length >= e.MAX_QUEUE_SIZE)
					return !0;
				var t = 0;
				if (_.each(this.queue, function (e) {
						t += e.timeElapsed
					}), t >= e.MAX_QUEUE_TIME)
					return !0
			}
		}
		return !1
	},
	e.prototype.push = function (e) {
		this.queue.push(e),
		this.shouldflushQueue() && this.doFlush()
	},
	e.prototype.pushAndflushSync = function (e) {
		this.flushInProgress || (this.queue.push(e), this.doFlush(!1))
	},
	e.prototype.flushOnInterval = function () {
		this.queue.length > 0 && this.flushIntervalDone() && !this.flushInProgress && this.doFlush()
	},
	e.prototype.justFlushBitch = function (e) {
		var t = this;
		this.queue.length > 0 ? $.when(this.doFlush()).then(function () {
			null != e && (t.flushInProgress = !0, e())
		}) : null != e && (this.flushInProgress = !0, e())
	},
	e.createEventData = function (e) {
		return {
			userid : networkUser.userId,
			events : e
		}
	},
	e.prototype.postEventData = function (e, t, a) {
		a === void 0 && (a = !0);
		var r = XORCipher.encode(DataSaver.key, JSON.stringify(e));
		return $.ajax({
			type : "POST",
			async : a,
			url : GAME_URL + (loggedIn ? "events" : "eventsanon"),
			data : r,
			contentType : "text/plain",
			success : t,
			error : function (e) {
				401 == e.status ? window.location.replace(URL_LOGIN) : (uiElemManager.networkError.display(), 406 == e.status && uiElemManager.networkError.el().text("Cheating"))
			}
		})
	},
	e.AUTO_FLUSH_INTERVAL = 1e3,
	e.MAX_QUEUE_TIME = 1e3,
	e.MAX_QUEUE_SIZE = 150,
	e
}
(), RestEventCreator = function () {
	function e() {
		this.lastEventTime = 0,
		this.eventManager = new RestEventManager
	}
	return e.prototype.init = function () {
		this.lastEventTime = (new Date).getTime(),
		this.eventManager.init()
	},
	e.prototype.calcTimeElapsed = function () {
		var e = (new Date).getTime(),
		t = e - this.lastEventTime;
		return this.lastEventTime = e,
		t
	},
	e.prototype.createEvent = function (e, t, a) {
		var r = {
			type : e,
			timeElapsed : this.calcTimeElapsed(),
			generatedMem : a,
			power : t
		};
		return r
	},
	e.prototype.createSaveEvent = function () {
		return this.createEvent(1, null, localStats.byteCount)
	},
	e.prototype.onSaveSync = function (e) {
		var t = this.createEvent(1, null, e);
		this.eventManager.pushAndflushSync(t)
	},
	e.prototype.onSave = function (e) {
		var t = this.createEvent(1, null, e);
		this.eventManager.push(t)
	},
	e.prototype.onSaveStoryDone = function (e) {
		var t = this.createEvent(5, null, e);
		this.eventManager.push(t)
	},
	e.prototype.onDrip = function (e) {
		var t = this.createEvent(2, null, e);
		this.eventManager.push(t)
	},
	e.prototype.onBuy = function (e, t) {
		var a = this.createEventPower(null, e),
		r = this.createEvent(3, a, t);
		this.eventManager.push(r)
	},
	e.prototype.onBuyUpg = function (e, t) {
		var a = this.createEventPower(e.name, e.powerup),
		r = this.createEvent(4, a, t);
		this.eventManager.push(r)
	},
	e.prototype.onBuySpecialUpg = function (e, t) {
		var a = this.createEventPower(e.name, null),
		r = this.createEvent(6, a, t);
		this.eventManager.push(r)
	},
	e.prototype.createEventPower = function (e, t) {
		if (null == t)
			return {
				name : null,
				upgName : e,
				price : 0,
				priceUnit : 0,
				totalBps : 0,
				curBps : 0
			};
		var a = t.priceStr.split(",").join("").toLowerCase(),
		r = PowerUp.priceStringConvertorForRest(a);
		return {
			name : t.name,
			upgName : e,
			price : r[0],
			priceUnit : r[1],
			totalBps : t.fetchTotalBps(),
			curBps : t.currentBps
		}
	},
	e
}
(), DataSaver = function () {
	function e() {
		this.saveLoop = !1,
		this.lastSaveTime = (new Date).getTime(),
		this.lastDripTime = (new Date).getTime(),
		this.saveInterval = 6e4,
		this.loadedDripTs = 0
	}
	return e.prototype.initSaveLoop = function () {
		this.saveLoop = !0
	},
	e.prototype.savePeriodically = function () {
		if (this.saveLoop) {
			var t = (new Date).getTime(),
			a = t - this.lastSaveTime;
			a >= this.saveInterval && (e.saveData(!0), this.lastSaveTime = t)
		}
	},
	e.prototype.doingSave = function (e) {
		var t,
		a,
		r = (new Date).getTime();
		return t = r - this.lastDripTime,
		t += this.loadedDripTs,
		this.loadedDripTs = 0,
		a = r - this.lastSaveTime,
		e ? this.lastDripTime = r : this.lastSaveTime = r, {
			ld : t,
			ls : a
		}
	},
	e.saveData = function (e) {
		null != networkUser && (e ? restEventCreator.onSave(localStats.byteCount) : restEventCreator.onSaveSync(localStats.byteCount))
	},
	e.grabBean = function () {
		null != networkUser && $.ajax({
			type : "POST",
			url : GAME_URL + "grabBean",
			success : function (e) {
				e === !0 ? Mine.onGrabSuccess() : Mine.onGrabFail()
			}
		})
	},
	e.fetchLeaderboard = function () {
		null != networkUser && $.ajax({
			type : "POST",
			url : GAME_URL + "lb",
			data : {
				name : networkUser.userName
			},
			success : function (e) {
				LeaderBoardUI.createLeaderboardTable(e.lb)
			}
		})
	},
	e.welcomeDone = function () {
		null != networkUser && $.ajax({
			type : "POST",
			url : GAME_URL + "welcomedone",
			success : function () {}

		})
	},
	e.fetchJVMData = function () {
		null != networkUser && $.ajax({
			type : "POST",
			url : APM_SVR + "rest/game/jvmdata",
			success : function (e) {
				uiElemManager.dripJVMContent.update(e)
			}
		})
	},
	e.dripData = function (e) {
		null != networkUser && restEventCreator.onDrip(e)
	},
	e.prototype.loadData = function (e) {
		localStats.load(e),
		this.initSaveLoop()
	},
	e.key = "medripper1",
	e
}
(), networkUser = null, dataSaver = new DataSaver, restEventCreator = new RestEventCreator, loggedIn = !1, MsgData = function () {
	function e(e, t, a) {
		this.msg = e,
		this.timer = t,
		this.newState = a
	}
	return e
}
(), StoryNotificationQueue = function () {
	function e() {
		this.queue = []
	}
	return e.prototype.add = function (e, t, a) {
		t === void 0 && (t = 2),
		a === void 0 && (a = null),
		this.queue.push(new MsgData(e, 1e3 * t, a))
	},
	e.prototype.checkQueue = function () {
		if (this.queue.length > 0) {
			var t = this.queue[0];
			t.timer -= 1e3 / game.fps,
			0 >= t.timer && (e.printNotification(t.msg), null != t.newState && story.changeState(t.newState), this.queue.shift())
		}
	},
	e.printNotification = function (e) {
		var t = 10;
		$(".notification").length == t - 1 && $(".notification:last").remove(),
		uiElemManager.storyNotifications.addMsg(e)
	},
	e.clearNotifications = function () {
		$("#notifications").empty()
	},
	e.initUI = function () {
		uiElemManager.storyNotifications.start(),
		story.begin()
	},
	e
}
(), StoryState;
(function (e) {
	e[e.BEGIN = 0] = "BEGIN",
	e[e.REACHED_CAP = 1] = "REACHED_CAP",
	e[e.SHOW_GLOBAL_MEM = 2] = "SHOW_GLOBAL_MEM",
	e[e.NEED_DRIP = 3] = "NEED_DRIP",
	e[e.NEED_MORE_DRIP = 4] = "NEED_MORE_DRIP",
	e[e.NEED_CAP = 5] = "NEED_CAP",
	e[e.BORING = 6] = "BORING",
	e[e.SHOW_GLOBAL = 7] = "SHOW_GLOBAL",
	e[e.SHOW_CURSOR = 8] = "SHOW_CURSOR",
	e[e.BOUGHT_CURSOR = 9] = "BOUGHT_CURSOR",
	e[e.SHOW_UPGRADE = 10] = "SHOW_UPGRADE",
	e[e.BUY_UPGRADE = 11] = "BUY_UPGRADE",
	e[e.END = 12] = "END",
	e[e.NOP = 13] = "NOP"
})(StoryState || (StoryState = {}));
var Story = function () {
	function e() {
		this.state = 0,
		this.savedCapacity = 0,
		this.targetCapacity = 0,
		this.storyInProgress = !1
	}
	return e.prototype.changeState = function (e) {
		this.state = e
	},
	e.prototype.begin = function () {
		noStory || (this.storyInProgress = !0, notifications.add("DripStat needs memory", .5), notifications.add("Click coffeee to generate memory", 1.2))
	},
	e.prototype.onGameLoop = function () {
		if (this.storyInProgress)
			switch (this.state) {
			case 0:
				localStats.byteCount > 0 && (uiElemManager.memCapacityText.show(), uiElemManager.localProgressBar.show(), this.state++);
				break;
			case 1:
				this.reachedCapacity() && (notifications.add("'Drip Memory' to DripStat", 1.5, this.state + 1), this.nop());
				break;
			case 2:
				uiElemManager.btnDripToGlobal.show(),
				uiElemManager.globalInfo.show(),
				uiElemManager.dripGraph.showSeries_Others(!1),
				uiElemManager.dripGraph.show(),
				this.savedCapacity = localStats.memoryCapacity,
				this.state++;
				break;
			case 3:
				localStats.memoryCapacity > this.savedCapacity && (this.savedCapacity = localStats.memoryCapacity, uiElemManager.storyNotifications.clearMsgs(), notifications.add("DripStat needs memory", .5), notifications.add("Drip more memory", 1), this.state++);
				break;
			case 4:
				localStats.memoryCapacity > this.savedCapacity && (this.savedCapacity = localStats.memoryCapacity, 20 > this.savedCapacity ? notifications.add("Drip more memory", 1) : this.state++);
				break;
			case 5:
				this.targetCapacity = localStats.memoryCapacity + 10,
				uiElemManager.storyNotifications.clearMsgs(),
				notifications.add("You need more Memory Capacity", 1),
				uiElemManager.capacityText.animateFontSize(60),
				notifications.add("Dripping increases your capacity", 1),
				notifications.add("Increase capacity to " + this.targetCapacity + " bytes", 1.5),
				this.state++;
				break;
			case 6:
				localStats.memoryCapacity >= this.targetCapacity && (uiElemManager.storyNotifications.clearMsgs(), notifications.add("Ok, this is getting kinda boring", .5), notifications.add("There really is a lot more to this game", 1.2), notifications.add("First off, you are not the only one playing!", 1.5, 7), this.nop());
				break;
			case 7:
				uiElemManager.globalTab.show(),
				uiElemManager.globalHeapText.show(),
				uiElemManager.dripGraph.showSeries_Others(!0),
				notifications.add("The more people drip, the more functionality DripStat gets", 3),
				notifications.add("Also, why click when you can buy!", 2, 8),
				this.nop();
				break;
			case 8:
				StoreUI.createInitial(),
				uiElemManager.upgrades.hide(),
				notifications.add("Buy Cursor to auto generate memory", 2.2),
				notifications.add("You need " + localStats.cursor().curPrice + " bytes to buy a Cursor", 2),
				this.state++;
				break;
			case 9:
				localStats.cursor().count > 0 && (uiElemManager.bpsText.animateFontSize(60), notifications.add("You can buy more cursors to increase your Bytes Per Second (BPS)"), notifications.add("For now, 'Upgrade' your Cursor", 2, 10), this.nop());
				break;
			case 10:
				uiElemManager.upgrades.show(),
				notifications.add("Its the little square box with a cursor icon… above the ‘Cursor’..."),
				this.state++;
				break;
			case 11:
				localStats.cursor().purchasedUpgrades.length > 0 && (uiElemManager.storyNotifications.clearMsgs(), notifications.add("Have Fun!", 1), notifications.add("", 3, 12), this.nop());
				break;
			case 12:
				uiElemManager.storyNotifications.displayNone(),
				uiElemManager.btnDripJvm.show(),
				StoreUI.createRestOfThem(),
				storeUI.rebuildUpgrades = !0,
				this.storyInProgress = !1,
				restEventCreator.onSaveStoryDone(localStats.byteCount)
			}
	},
	e.prototype.nop = function () {
		this.state = 13
	},
	e.prototype.reachedCapacity = function () {
		return localStats.byteCount === localStats.memoryCapacity
	},
	Object.defineProperty(e.prototype, "inProgress", {
		get : function () {
			return this.storyInProgress
		},
		enumerable : !0,
		configurable : !0
	}),
	e
}
(), notifications = new StoryNotificationQueue, story = new Story, noStory = !1, GameData = function () {
	function e() {
		this.fps = 30,
		this.frameCount = 0,
		this.time = 0,
		this.accumulatedDelay = 0
	}
	return e
}
(), GlobalScore = function () {
	function e() {
		this.totalBytes = 0,
		this.usedBytes = 0
	}
	return e.prototype.remainingBytes = function () {
		var e = this.totalBytes - this.usedBytes;
		return 0 > e && (e = 0),
		e
	},
	e.prototype.drip = function (e) {
		this.usedBytes += e
	},
	e
}
(), Dripper = function () {
	function e() {
		this.autoDrip = !1
	}
	return e.prototype.dripGlobal = function (e) {
		if ((!e || this.autoDrip) && localStats.byteCount >= 1) {
			var t = Math.floor(localStats.byteCount);
			localStats.onDripToGlobal(t),
			DataSaver.dripData(t),
			this.updateUI(t, !1)
		}
	},
	e.prototype.updateUI = function (e, t, a) {
		a === void 0 && (a = "");
		var r = !1;
		if (uiElemManager.dripGraph.tabShown && (t ? uiElemManager.dripGraph.isOthersSeriesVisible() && !uiElemManager.dripGraph.isHidden() && (r = !0) : r = !0), r) {
			var n = 0;
			t || (n = 1),
			popManager.newPop("chartContainer", "+" + NumUtils.byteConvert(e) + " " + a, n)
		} else !t && uiElemManager.personalDripChart.tabShown && popManager.newPop("personalChartContainer", "+" + NumUtils.byteConvert(e), 1);
		t || uiElemManager.personalDripChart.updateChartOnDrip(e),
		uiElemManager.dripGraph.updateChart(e, t),
		ProgressBars.updateGlobalBar(),
		UIManager.updateGlobalStat()
	},
	e
}
(), LocalData = function () {
	function e() {
		this.byteCount = 0,
		this.bps = 0,
		this.memoryCapacity = 5,
		this.jvmDripUpgrade = null,
		this.powerUps = (new PowerupFactory).createPowerups(),
		this.specialUpgrades = PowerupFactory.createSpecialUpgrades(),
		this.jvmDripUpgrade = this.specialUpgrades[3]
	}
	return e.prototype.printInfo = function () {
		var e = [];
		_.each(this.powerUps, function (t) {
			e.push(t.printInfo())
		});
		var t = [];
		return _.each(this.specialUpgrades, function (e) {
			t.push(e.printInfo())
		}), {
			powers : e,
			specialUpgrades : t
		}
	},
	e.prototype.fetchAvailableSpecialUpgrades = function () {
		var e = [];
		if (!story.inProgress) {
			var t = this.specialUpgrades[0],
			a = this.specialUpgrades[1],
			r = this.specialUpgrades[2],
			n = this.specialUpgrades[3],
			o = this.specialUpgrades[4];
			r.purchased || e.push(r),
			t.purchased || e.push(t),
			!a.purchased && this.brogrammer().count > 0 && e.push(a),
			n.purchased || e.push(n),
			o.purchased || e.push(o)
		}
		return e
	},
	e.prototype.brogrammer = function () {
		return this.powerUps[1]
	},
	e.prototype.cursor = function () {
		return this.powerUps[0]
	},
	e.prototype.load = function (t) {
		var a = this;
		if (t.v == e.VERSION_DATA && t.storyDone) {
			this.byteCount = t.mem,
			this.bps = t.bps,
			this.memoryCapacity = t.capacity,
			t.springUnlocked && (springPowerup.isLocked = !1),
			_.each(t.powers, function (e) {
				var t = _.where(a.powerUps, {
						name : e.name
					});
				1 == t.length && t[0].load(e)
			});
			var r = uiElemManager.globalDripTab;
			_.each(t.spUpgs, function (e) {
				var t = _.where(a.specialUpgrades, {
						name : e
					});
				1 == t.length && (t[0].load(), "Personal Drips" === e && (r = uiElemManager.personalDripTab))
			}),
			uiElemManager.chartsTabGroup.switchToTab(r),
			this.updateBps(),
			ui.updateMemoryCapacity(),
			Mine.updateUI(),
			showWelcome(t.welcome),
			storeUI.rebuildUpgrades = !0
		}
	},
	e.prototype.update = function () {
		this.bps > 0 && this.byteCount < this.memoryCapacity && (this.byteCount += this.bps / game.fps),
		this.byteCount > this.memoryCapacity && (this.byteCount = this.memoryCapacity, dripper.dripGlobal(!0));
		for (var e = 0; this.powerUps.length > e; e++) {
			var t = this.powerUps[e];
			t.updateAvailibilityState(this.byteCount)
		}
	},
	e.prototype.doUpdateBps = function () {
		for (var e = 0, t = 0; this.powerUps.length > t; t++) {
			var a = this.powerUps[t];
			e += a.fetchTotalBps()
		}
		this.bps = e
	},
	e.prototype.updateBps = function () {
		this.doUpdateBps(),
		UIManager.updateBPS()
	},
	e.prototype.onDripToGlobal = function (e) {
		this.memoryCapacity += e,
		this.byteCount = 0,
		ui.updateMemoryCapacity()
	},
	e.VERSION_DATA = 6,
	e
}
(), PopType;
(function (e) {
	e[e.NORMAL = 0] = "NORMAL",
	e[e.YOUR_DRIP = 1] = "YOUR_DRIP"
})(PopType || (PopType = {}));
var Pop = function () {
	function e(e, t, a) {
		this.elem = e,
		this.msg = t,
		this.type = a,
		this.life = 0,
		this.offx = Math.floor(20 * Math.random() - 10),
		this.offy = Math.floor(20 * Math.random() - 10),
		this.rect = el(this.elem).getBoundingClientRect()
	}
	return e.prototype.createPopElem = function () {
		var e = Math.floor((this.rect.left + this.rect.right) / 2 + this.offx) - 100,
		t = Math.floor((this.rect.top + this.rect.bottom) / 2 - 100 * Math.pow(this.life / 100, .5) + this.offy) - 10,
		a = 1 - (Math.max(this.life, 80) - 80) / 20,
		r = "";
		("chartContainer" === this.elem || "personalChartContainer" === this.elem) && (r = "font-size: 40px;", e += 20);
		var n;
		n = 1 == this.type ? "LightSkyBlue" : "lightcoral";
		var o = '<div class="pop" style="position:absolute;left:' + e + "px;top:" + t + "px;opacity:" + a + ";color:" + n + ";" + r + '">' + this.msg + "</div>";
		return this.life += 2,
		o
	},
	e
}
(), PopManager = function () {
	function e() {
		this.pops = []
	}
	return e.prototype.newPop = function (e, t, a) {
		a === void 0 && (a = 0),
		250 > this.pops.length && this.pops.push(new Pop(e, t, a))
	},
	e.prototype.updatePops = function () {
		for (var e = "", t = this.pops.length - 1; t >= 0; t--) {
			var a = this.pops[t];
			e += a.createPopElem(),
			a.life >= 100 && this.pops.splice(t, 1)
		}
		el("pops").innerHTML = e
	},
	e
}
(), UIManager = function () {
	function e() {}

	return e.onUpgradePurchase = function (e) {
		gameTooltip.hide(),
		null != e && uiElemManager.bpsChart.update(e),
		storeUI.rebuildUpgrades = !0
	},
	e.prototype.updateMemoryCapacity = function () {
		uiElemManager.memCapacity.updateUI()
	},
	e.prototype.updateCounter = function () {
		var t = 0;
		localStats.byteCount > 1e3 && (t = 2),
		uiElemManager.heapCurrentElem.el().text(NumUtils.byteConvert(localStats.byteCount, t)),
		uiElemManager.heapCurrentBytesElem.el().text(NumUtils.Beautify(localStats.byteCount) + " bytes"),
		e.hideIfNeeded("#heap-count-current-bytesDiv", localStats.byteCount > 1e3);
		var a = $("#heap-count-currentDiv")[0].style;
		localStats.byteCount >= 100 * Units.GB ? "" === a.left && (a.left = "-22px") : "" != a.left && (a.left = "")
	},
	e.hideIfNeeded = function (e, t) {
		var a = $(e)[0].style;
		t ? "none" === a.display && (a.display = "") : "none" != a.display && (a.display = "none")
	},
	e.updateGlobalStat = function () {
		$("#global-heap-count-current").text(NumUtils.byteConvert(globalStats.usedBytes, 2)),
		$("#global-heap-count-current-bytes").text(" (" + NumUtils.Beautify(globalStats.usedBytes) + " bytes)");
		var e = globalStats.remainingBytes(),
		t = NumUtils.byteConvert(e, 2);
		e > 999 && (t += " (" + NumUtils.Beautify(e) + " bytes)"),
		$("#global-heap-count-remaining").text(t)
	},
	e.prototype.updateUI = function () {
		this.updateCounter(),
		this.updateButtons(),
		ProgressBars.updateLocalBar(),
		notifications.checkQueue(),
		storeUI.drawUpgrades(),
		storeUI.updateUpgradeStates(localStats.byteCount)
	},
	e.updateBPS = function () {
		$("#bps-current").text(NumUtils.byteConvert(localStats.bps, 2) + "/second"),
		$("#bps-current-bytes").text(NumUtils.Beautify(localStats.bps) + " bytes/second"),
		e.hideIfNeeded("#bps-current-bytes", localStats.bps > 1e3),
		uiElemManager.personalDripChart.onUpdateBps(localStats.bps)
	},
	e.prototype.updateButtons = function () {
		for (var e = 0; localStats.powerUps.length > e; e++) {
			var t = localStats.powerUps[e];
			springPowerup.isSpring(t) ? ($(".storeItem#pu" + (e + 1)).toggleClass("locked", springPowerup.isLocked), springPowerup.isLocked || $(".storeItem#pu" + (e + 1)).toggleClass("disabled", !t.available)) : $(".storeItem#pu" + (e + 1)).toggleClass("disabled", !t.available)
		}
	},
	e.prototype.updatePowerupButton = function (e) {
		for (var t = 0; localStats.powerUps.length > t; t++) {
			var a = localStats.powerUps[t];
			if (a === e) {
				var r = "#pu" + (t + 1) + " .storePrice",
				n = a.priceStr;
				$(r).text() != n && $(r).text(n);
				var o = "#pu" + (t + 1) + " .storeItemAmount";
				$(o).text() != "" + a.count && $(o).text(a.count)
			}
		}
	},
	e
}
(), CoffeeCup = function () {
	function e() {}

	return e.calcBytesPerClick = function () {
		var e = localStats.cursor(),
		t = 10 * e.purchasedUpgrades.length;
		if (t > 0) {
			var a = localStats.bps * t / 100;
			return Math.max(a, 1)
		}
		return 1
	},
	e
}
(), AnonymousUserManager = function () {
	function e() {}

	return e.canBuyPowerUp = function (t) {
		if (!loggedIn) {
			var a = localStats.powerUps.indexOf(t);
			if (a >= e.MAX_PU_INDEX)
				return SignupForm.showDialog(!1), !1
		}
		return !0
	},
	e.canDrip = function () {
		return !loggedIn && localStats.memoryCapacity >= e.MAX_CAP ? (SignupForm.showDialog(!1), !1) : !0
	},
	e.canGrabBean = function () {
		return loggedIn ? !0 : (vex.dialog.open({
				buttons : [$.extend({}, vex.dialog.buttons.YES, {
						text : "Signup",
						className : "vex-dialog-button-primary signupButton"
					}), $.extend({}, vex.dialog.buttons.NO, {
						text : "Cancel"
					})],
				escapeButtonCloses : !1,
				message : "<p>Signup to grab Spring Bean.<br>(Your progress will be saved)</p>",
				callback : function (e) {
					e === !0 && SignupForm.showDialog(!0)
				}
			}), !1)
	},
	e.MAX_PU_INDEX = 4,
	e.MAX_CAP = 2e4,
	e
}
(), Mine = function () {
	function e() {
		this.beanCount = 0
	}
	return e.prototype.onUpdate = function (e) {
		this.beanCount = parseInt(e.body),
		uiElemManager.mineBeanCount.el().text(this.beanCount);
		var t = this.beanCount > 0;
		uiElemManager.mineTabHeader.el().toggleClass("mineActive", t)
	},
	e.onGrab = function () {
		AnonymousUserManager.canGrabBean() && (0 == mine.beanCount ? e.onGrabFail() : DataSaver.grabBean())
	},
	e.onGrabFail = function () {
		vex.dialog.open({
			buttons : [$.extend({}, vex.dialog.buttons.YES, {
					text : "Ok"
				}), $.extend({}, vex.dialog.buttons.NO, {
					text : "How to mine?",
					className : "vex-dialog-button-primary signupButton"
				})],
			escapeButtonCloses : !1,
			message : "Sorry, no beans left to grab",
			callback : function (t) {
				t === !1 && e.showMiningInfoDlg()
			}
		})
	},
	e.onGrabSuccess = function () {
		springPowerup.isLocked = !1,
		vex.dialog.alert("You have unlocked 'Spring Framework'!"),
		e.updateUI()
	},
	e.updateUI = function () {
		springPowerup.isLocked ? (uiElemManager.mineButtonWrapper.display(), uiElemManager.mineUnlockedMsg.displayNone()) : (uiElemManager.mineButtonWrapper.displayNone(), uiElemManager.mineUnlockedMsg.display())
	},
	e.showMiningInfoDlg = function () {
		var e = "<b>Why?</b> <br>You need a Spring Bean to unlock the Spring Framework";
		e += "<br><br><b>How to mine?</b><br/> 1. Connect a JVM that uses <a target='_blank' href='http://spring.io'>Spring Framework</a>.",
		e += "<br>2. Every 24 hours a Spring Bean will be mined.",
		e += "<br>3. JVMs with Spring Framework also drip a boosted 10% of heap instead of the usual 5%",
		e += "<br>4. The first bean automatically goes to you, the rest goes to the Global Mine.",
		e += "<br><i>(Remember: JVM must use Spring Framework to mine Spring Beans)</i>",
		e += "<br><br><b>What if I dont connect a JVM?</b>",
		e += "<br>You will need to grab a bean from the Global Mine.<br>Just press the 'Grab Spring Bean' button if you see one.",
		e += "<br><br>The more JVMs using Spring Framework are connected, the more Spring Beans are generated for the Global Mine!",
		vex.dialog.open({
			buttons : [vex.dialog.buttons.YES],
			message : e,
			contentCSS : {
				width : "800px"
			}
		})
	},
	e
}
(), GameSocket = function () {
	function e() {
		this.wsInited = !1
	}
	return e.onDataReceive = function (e) {
		var t = JSON.parse(e.body),
		a = t.m,
		r = t.d.u,
		n = t.d.h;
		globalStats.totalBytes != a && (globalStats.totalBytes = a, ProgressBars.updateGlobalBar(), UIManager.updateGlobalStat());
		var o = n - globalStats.usedBytes;
		if (globalStats.usedBytes = n, gameSockets.wsInited) {
			var i = !0;
			null != networkUser && networkUser.userName === r && (i = !1),
			i && dripper.updateUI(o, !0, r)
		} else
			gameSockets.wsInited = !0, ProgressBars.updateGlobalBar(), UIManager.updateGlobalStat()
	},
	e.init = function () {
		gameSockets.wsInited = !1;
		var t = new SockJS(WS_SVR + "wsgame"),
		a = Stomp.over(t);
		a.debug = function () {},
		a.connect({}, function () {
			a.subscribe("/app/globaldata", function (t) {
				e.onDataReceive(t)
			}),
			a.subscribe("/topic/globaldata", function (t) {
				e.onDataReceive(t)
			}),
			a.subscribe("/topic/mine", function (e) {
				mine.onUpdate(e)
			}),
			a.subscribe("/app/mine", function (e) {
				mine.onUpdate(e)
			})
		}, function () {
			console.log("reconnecting websocket in 5s..."),
			setTimeout(e.init, 5e3)
		})
	},
	e
}
(), uiElemManager = new UIElemManager, ui = new UIManager, dripper = new Dripper, gameTooltip = new Tooltip, localStats = new LocalData, globalStats = new GlobalScore, game = new GameData, popManager = new PopManager, gameSockets = new GameSocket, springPowerup = new SpringPowerup, mine = new Mine, curGameLevel = 17;
$(document).ready(function () {
	$.ajaxSetup({
		cache : !1,
		xhrFields : {
			withCredentials : !0
		}
	}),
	initGame()
}), vex.defaultOptions.className = "vex-theme-flat-attack";
var gameInited = !1;